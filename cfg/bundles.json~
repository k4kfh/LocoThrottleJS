/*
BUNDLES

This file is rather special. It bundles locomotive prototype entries and model entries to an entry in the JMRI roster.

It is done using objects, but the syntax is very specific. You must adhere to this syntax or things will explode in fiery infernos.
*/
bundles = new Object();

//Locomotives - ARE currently tied to the JMRI roster - Please make sure your syntax is correct, and that the names of your entries match the JMRI roster entry names TO THE LETTER! It is case sensitive as well.
bundles.locomotives = {
    /*
    Example entry for my Athearn Genesis GP15-1 is shown below
    
    "GP15-1 #1379":{
        model:{
            speed:function(mph) {} this is a function that returns a speed in percent from a speed in mph. it is model-specific due to gearing.
        },
        
        prototype:"EMD GP15-1"
    }
    
    The decoder settings are not here because we can grab those straight from JMRI.
    */
    "CBQ2" : {
        type: "locomotive",
        model:{
            speed:function(mph) {
                mph = speed; //totally not correct but it is a functional example
                return speed;
            }
        },
        prototype:{
            "builder" : "EMD", //This is displayed to the client and can be anything
            "name" : "F7-A", //This is also displayed to the client and can be anything
            "type" : "locomotive", //This must be "locomotive"
            "weight" : 250000, //Weight of the locomotive in lbs
            "maxHP" : 1500, //Horsepower of the locomotive
            "notchRPM" : [300, 362, 425, 487, 550, 613, 675, 738, 800],
            "notchMaxSpeeds" : [null, 7.5, 15, 22.5, 30, 37.5, 45, 52.5, 60],
            "engineRunning": 0, //0 or 1 - 1 is on, 0 is off
            fuel : {
                usage : [3.5, 6.5, 14.5, 23.4, 33.3, 45.7, 59.6, 75.3, 93.1], //array in gal/hr, by notch
                capacity : 1200, //fuel tank in GAL
            },
            "calc" : {
                /*
                This is an object containing several functions that I am leaving open to developers. Among these are tractive effort and a few other things that could be calculated in a number of different ways. There's no one-size-fits-all method, so I am putting this in the hands of devs.
                */
                "te" : function(speed, trainPosition) {
                    /*
                    This example uses an equation from a Virginia Tech paper.
                    
                    It is important to note that the value from this function will be used, unaltered, in the physics engine. You cannot forget to take into account the reverser. This is easy; all you have to do is multiply your calculated value by the global variable: reverser . If we're in neutral, this will yield 0. In forward, it will do nothing. In reverse, it will make your number negative. Simple, but very important.
                    */
                    //First we need to convert the speed to KM/HR.
                    var efficiency = 0.72
                    var horsepower = train.all[trainPosition].prototype.maxHP * (notch.state/8)
                    train.all[trainPosition].prototype.realtime.horsepower = horsepower; //just so it's stored
                    var speedSI = speed * 1.60934
    
                    /*
                    Now we must actually use the formula from the Virginia Tech paper. It states:
                    T = 2650((np/v))
    
                    T is tractive effort in Newtons.
                    n is the efficiency coefficient (unitless)
                    p is the output horsepower
                    v is the speed in km/hr
                    */
                    var teNewtons = 2650 * ( (efficiency * horsepower)/(speedSI) )
    
                    //Now that we have the tractive effort in Newtons, we must convert it to pounds.
                    var teLbs = 0.224809 * teNewtons * reverser
                    //This is a measure of protection since the equation creates a curve that moves upwards too sharply
                    if (speed < 8.9) {
                        teLbs = 56500 * (notch.state / 8) * reverser;
                    }
                    return teLbs;
                },
                /*
                A locomotive's traction motors can only spin so fast with a given applied voltage, so even if there is theoretically enough power left the train can only continue to accelerate so much. This idea manifests itself as a "speed limit" built into the locomotive. The theory behind this may be subject to debate, so I (@k4kfh) chose to leave this up to a function.
                
                The function accepts the train position as its only argument, and it should be able to get the rest of the information it needs from that.
                */
                "maxSpeed" : function(trainPosition) {
                    var speedPerNotch = 7.5; //I chose to make my function a simple linear calculation
                    var maxSpeed = speedPerNotch * notch.state;
                    //This is a simple linear calculation that seemed 'good enough' to me, but if you find actual numbers you could create a better way.
                    var actualSpeed = train.total.accel.speed.mph //TODO: Once coupler slack is implemented, this must change to the individual element's speed
                    if (actualSpeed > maxSpeed) {
                        //if we're exceeding it
                        train.all[trainPosition].prototype.realtime.exceedingMaxSpeed = 0;
                    }
                    else {
                        //if all is well
                        train.all[trainPosition].prototype.realtime.exceedingMaxSpeed = 1; //this is an inverted boolean, see sim.js's math for the reason why
                    }
                }
            },
            air : {
                reservoir : {
                    main : {
                        capacity : 46.7882, //capacity of the tank in cubic feet
                        leakRate : 0, //leak rate in cubic feet per 100ms
                    },
                    
                },
                compressor : {
                    limits : {
                        lower : 130, //This is the point at which the compressor will turn back on and fill up the air reservoir (psi)
                        upper : 140, //This is the point at which the compressor will turn off (psi)
                    },
                    flowrate : 0.28, //This is cfm/rpm, derived from "255cfm @ 900rpm for an SD45" according to Mr. Al Krug
                    needsEngine : true,
                    
                },
                device : {
                    horn : {
                        cfm : 70, //air consumption rate in cfm
                        usagePerMs : 0.001167, //usage in cubic feet, per millisecond (should be an absurdly small number)
                        operatingPressure : 100, //this horn runs at 100psi
                    },
                    bell : {
                        cfm : 0, //temporary until I get actual numbers
                        usagePerMs : 0, //^^^
                        operatingPressure : 10, //mental approximation courtesy of Bruce Kingsley
                    }
                }
            },
            // This is for all the real-time, frequently-recalculated stuff.
            "realtime" : {
                netForce: 0, //defined to make it work later
                speed : 0, //This is defined just to be safe.
                exceedingMaxSpeed : 1, //This is a boolean stored as a number by .prototype.calc.maxSpeed . If the locomotive has reached its max speed, this becomes zero to nullify the tractive effort. If not, it remains 1.
                horsepower : 0, //This is the OUTPUT HP
                "grade" : 0, //IMPORTANT : This can be set to any grade percentage, but it should be as a percent not as a decimal. 1 for a 1% grade, NOT 0.01!
                fuel : {
                    status : 1200, //You should set this to the max fuel capacity, or you'll be starting off with a non-full tank
                    notifiedOfEmptyTank : false,
                },
                air : {
                    compressor : {
                        calc : function(trainPosition) {
                            /*
                            This function should calculate and set the flow rate in CFM. You can find out any prototype property since we gave it the trainPosition. You should NOT multiply this calculation by running or engineRunning; sim.js will do that!
                            In an F7, the compressor is driven directly by the prime mover, so this calculation will look at RPM and go from there. If you had an engine with an electric compressor, that would be different.
                            */
                            var rpm = train.all[trainPosition].prototype.realtime.rpm
                            var cfm = rpm * 0.283; //This is a figure that I got from "255cu ft/min @ 900rpm" from Al Krug.
                            
                            return cfm;
                        },
                        flowrate : {}, //this subobject will end up containing flow rates in a few different units
                        running : 0, //This works a lot like prototype.engineRunning
                    },
                    reservoir : {
                        //Realtime data about the main reservoir is stored here
                        main : {
                            atmAirVolume: 6316.307, //should be set to capacity * 135 (because that will make the reservoir start out at 135psi)
                            psi : {
                                g : 0, //gauge psi, 0 means 1atm of pressure
                                abs : 14.696, //absolute psi
                            },
                            dump : false, //set to true when the dump valve is open
                        }
                    }
                },
            }, //This is used by the physics engine to store current information, we just go ahead and define it
            "gauges": {
                /*
            this is a sub object containing all the gauge info. Gauges are rendered with https://github.com/Mikhus/canv-gauge/, so see the wiki there for more info on these options.
            */
                "speedometer": {
                    "title" : "Speed",
                    "minValue" : 0,
                    "maxValue" : 120,
                    "majorTicks" : ['0', '20', '40', '60', '80', '80', '100', '120'],
                    "minorTicks" : 10,
                    "strokeTicks" : true,
                    "units" : "MPH",
                    "valueFormat" : { int : 3, dec : 0},
                    "glow" : false,
                    "animation" : {
                        delay : 0,
                        duration : 500,
                        fn : "quad",
                    },
                    "colors" : {
                        plate      : '#fff',
                        majorTicks : '#444',
                        minorTicks : '#666',
                        title      : '#888',
                        units      : '#888',
                        numbers    : '#444',
                        needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                    },
                    highlights : [],
                },
                "rpm" : {
                    "title" : "",
                    "minValue" : 0,
                    "maxValue" : 900,
                    "majorTicks" : ['0', '100', '200', '300', '400', '500', '600', '700', '800', '900'],
                    "minorTicks" : 10,
                    "strokeTicks" : true,
                    "units" : "RPM",
                    "valueFormat" : { int : 3, dec : 0},
                    "glow" : false,
                    "animation" : {
                        delay : 0,
                        duration : 1200,
                        fn : "cycle",
                    },
                    "colors" : {
                        plate      : '#fff',
                        majorTicks : '#444',
                        minorTicks : '#666',
                        title      : '#888',
                        units      : '#888',
                        numbers    : '#444',
                        needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                    },
                    highlights : [],
                },
                "fuel": {
                    "title" : "Fuel",
                    "minValue" : 0,
                    "maxValue" : 1200,
                    "majorTicks" : ['0', '100', '200', '300', '400', '500', '600', '700', '800', '900', '1000', '1100', '1200'],
                    "minorTicks" : 10,
                    "strokeTicks" : true,
                    "units" : "Gal.",
                    "valueFormat" : {int:4, dec:0},
                    "glow" : false,
                    "animation" : {
                        delay : 0,
                        duration : 500,
                        fn : "quad",
                    },
                    "colors" : {
                        plate      : '#fff',
                        majorTicks : '#444',
                        minorTicks : '#666',
                        title      : '#888',
                        units      : '#888',
                        numbers    : '#444',
                        needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                    },
                    highlights : [],
                },
                "air" : {
                    "reservoir" : {
                        "main" : {
                            "title" : "Main Reservoir",
                            "minValue" : 0,
                            "maxValue" : 150,
                            "majorTicks" : ['0', '25', '50', '75', '100', '125', '150'],
                            "minorTicks" : 10,
                            "strokeTicks" : true,
                            "units" : "PSI",
                            "valueFormat" : { int : 3, dec : 0},
                            "glow" : false,
                            "animation" : {
                                delay : 0,
                                duration : 500,
                                fn : "quad",
                            },
                            "colors" : {
                                plate      : '#fff',
                                majorTicks : '#444',
                                minorTicks : '#666',
                                title      : '#888',
                                units      : '#888',
                                numbers    : '#444',
                                needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                            },
                            highlights : [],
                        }
                    }
                }
            },
            "coefficientOf" : {
                rollingResistance : 0.0015,
            },
            brake : {
                //air brake equipment information
                lineLength : 50, //train line length, in feet, to be used with timing
                latency: 100, //time it takes to propagate a signal through the car, in milliseconds
                //makes a brake reduction on ``trainPosition`` by ``psi``, and calculates the braking force resulting
                reduction: function(trainPosition, psi) {
                    
                },
                tripleValveCycle : function(trainPosition) {
                    var reservoirPSI = train.all[trainPosition].prototype.brake.reservoirPSI;
                    var linePSI = train.all[trainPosition].prototype.brake.linePSI;
                    if (reservoirPSI > linePSI) {
                        
                        //Figure out how much of a reduction is needed
                        var reductionAmount = reservoirPSI - linePSI;
                        console.debug("Need to make a " + reductionAmount + "psi reduction on element " + trainPosition)
                        
                        //triple valve APPLY
                        train.all[trainPosition].prototype.brake.tripleValve  = "A";
                    }
                    else if (reservoirPSI < linePSI) {
                        //triple valve RELEASE
                        train.all[trainPosition].prototype.brake.tripleValve  = "R";
                        
                    }
                    else if (reservoirPSI == linePSI) {
                        //triple valve LAP
                        train.all[trainPosition].prototype.brake.tripleValve  = "L";
                        
                    }
                },
                reservoirPSI: 90, //reservoir psi
                cylinderPSI: 0, //brake cylinder psi
                linePSI: 90, //brake pipe psi
                tripleValve: "R", //can be "R"elease,  "A"pply, or "L"ap
                waitingOnChange: false, //tells brake.cycle() whether or not this car is already undergoing a change
                applicationRate: 0.5, //in psi/sec FROM RESERVOIR
            },
            //this serves as a sort of "RAM", almost a junk folder...lol
            "tmp" :{
                "intervals" : {
                    
                }
            }
        },
    },
    
    "CBQ1":{
        type: "locomotive",
        model:{
            speed:function(mph) {
                mph = speed; //totally not correct but it is a functional example
                return speed;
            }
        },
        prototype:{
            "builder" : "EMD", //This is displayed to the client and can be anything
            "name" : "F7-A", //This is also displayed to the client and can be anything
            "type" : "locomotive", //This must be "locomotive"
            "weight" : 250000, //Weight of the locomotive in lbs
            "maxHP" : 1500, //Horsepower of the locomotive
            "notchRPM" : [300, 362, 425, 487, 550, 613, 675, 738, 800],
            "notchMaxSpeeds" : [null, 7.5, 15, 22.5, 30, 37.5, 45, 52.5, 60],
            "engineRunning": 0, //0 or 1 - 1 is on, 0 is off
            fuel : {
                usage : [3.5, 6.5, 14.5, 23.4, 33.3, 45.7, 59.6, 75.3, 93.1], //array in gal/hr, by notch
                capacity : 1200, //fuel tank in GAL
            },
            "calc" : {
                /*
                This is an object containing several functions that I am leaving open to developers. Among these are tractive effort and a few other things that could be calculated in a number of different ways. There's no one-size-fits-all method, so I am putting this in the hands of devs.
                */
                "te" : function(speed, trainPosition) {
                    /*
                    This example uses an equation from a Virginia Tech paper.
                    
                    It is important to note that the value from this function will be used, unaltered, in the physics engine. You cannot forget to take into account the reverser. This is easy; all you have to do is multiply your calculated value by the global variable: reverser . If we're in neutral, this will yield 0. In forward, it will do nothing. In reverse, it will make your number negative. Simple, but very important.
                    */
                    //First we need to convert the speed to KM/HR.
                    var efficiency = 0.72
                    var horsepower = train.all[trainPosition].prototype.realtime.horsepower * notch.state
                    var speedSI = speed * 1.60934
    
                    /*
                    Now we must actually use the formula from the Virginia Tech paper. It states:
                    T = 2650((np/v))
    
                    T is tractive effort in Newtons.
                    n is the efficiency coefficient (unitless)
                    p is the output horsepower
                    v is the speed in km/hr
                    */
                    var teNewtons = 2650 * ( (efficiency * horsepower)/(speedSI) )
    
                    //Now that we have the tractive effort in Newtons, we must convert it to pounds.
                    var teLbs = 0.224809 * teNewtons * reverser
                    //This is a measure of protection since the equation creates a curve that moves upwards too sharply
                    if (speed < 8.9) {
                        teLbs = 56500 * (notch.state / 8) * reverser;
                    }
                    return teLbs;
                }
            },
            "realtime" : {
                speed : 0, //This is defined just to be safe.
                horsepower : 0, //This is the OUTPUT HP
                fuel : {
                    status : 1200, //You should set this to the max fuel capacity, or you'll be starting off with a non-full tank
                    notifiedOfEmptyTank : false,
                },
            }, //This is used by the physics engine to store current information, we just go ahead and define it
            "gauges": {
                /*
            this is a sub object containing all the gauge info. Gauges are rendered with https://github.com/Mikhus/canv-gauge/, so see the wiki there for more info on these options.
            */
                "speedometer": {
                    "title" : "Speed",
                    "minValue" : 0,
                    "maxValue" : 120,
                    "majorTicks" : ['0', '20', '40', '60', '80', '80', '100', '120'],
                    "minorTicks" : 10,
                    "strokeTicks" : true,
                    "units" : "MPH",
                    "valueFormat" : { int : 3, dec : 0},
                    "glow" : false,
                    "animation" : {
                        delay : 0,
                        duration : 500,
                        fn : "quad",
                    },
                    "colors" : {
                        plate      : '#fff',
                        majorTicks : '#444',
                        minorTicks : '#666',
                        title      : '#888',
                        units      : '#888',
                        numbers    : '#444',
                        needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                    },
                    highlights : [],
                },
                "rpm" : {
                    "title" : "",
                    "minValue" : 0,
                    "maxValue" : 900,
                    "majorTicks" : ['0', '100', '200', '300', '400', '500', '600', '700', '800', '900'],
                    "minorTicks" : 10,
                    "strokeTicks" : true,
                    "units" : "RPM",
                    "valueFormat" : { int : 3, dec : 0},
                    "glow" : false,
                    "animation" : {
                        delay : 0,
                        duration : 500,
                        fn : "cycle",
                    },
                    "colors" : {
                        plate      : '#fff',
                        majorTicks : '#444',
                        minorTicks : '#666',
                        title      : '#888',
                        units      : '#888',
                        numbers    : '#444',
                        needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                    },
                    highlights : [],
                },
                "fuel": {
                    "title" : "Fuel",
                    "minValue" : 0,
                    "maxValue" : 1200,
                    "majorTicks" : ['0', '100', '200', '300', '400', '500', '600', '700', '800', '900', '1000', '1100', '1200'],
                    "minorTicks" : 10,
                    "strokeTicks" : true,
                    "units" : "Gal.",
                    "valueFormat" : {int:4, dec:0},
                    "glow" : false,
                    "animation" : {
                        delay : 0,
                        duration : 500,
                        fn : "quad",
                    },
                    "colors" : {
                        plate      : '#fff',
                        majorTicks : '#444',
                        minorTicks : '#666',
                        title      : '#888',
                        units      : '#888',
                        numbers    : '#444',
                        needle     : { start : 'rgba(240, 128, 128, 1)', end : 'rgba(255, 160, 122, .9)' }
                    },
                    highlights : [],
                },
            },
            "coefficientOf" : {
                rollingResistance : 0.0015,
                
            },
            "grade" : 0, //IMPORTANT : This can be set to any grade percentage, but it should be as a percent not as a decimal. 1 for a 1% grade, NOT 0.01!
        }
    }
    
}

//Rolling Stock - NOT currently tied to the JMRI Roster
bundles.rollingstock = {
    "Generic Boxcar":{
        /*
        This is rather misleading. As of 3/16/16, there is ZERO integration with the JMRI roster for rolling stock.
        
        This object only has such a misleading naming convention to maintain backwards compatibility with some train.build stuff. If we specify the name inside .roster.name, it eliminates the need for a cumbersome if statement to deal with naming in train.ui HTML generation. It just works.
        
        In the future, integration with JMRI's OperationsPro is planned, and will likely make use of .roster to contain its information for a specific car.
        */
        roster : {
            name : "Generic Boxcar"
        },
        type : "rollingstock",
        prototype : {
            axles : 4,
            weight : 210000,
            realtime : {
                //realtime data for things like braking and coupler slack goes in here
            },
            brake : {
                //air brake equipment information
                lineLength : 50, //train line length, in feet, to be used with timing
                latency: 100, //time it takes to propagate a signal through the car, in milliseconds
                //makes a brake reduction on ``trainPosition`` by ``psi``, and calculates the braking force resulting
                reduction: function(trainPosition, psi) {
                    
                },
                tripleValveCycle : function(trainPosition) {
                    var reservoirPSI = train.all[trainPosition].prototype.brake.reservoirPSI;
                    var linePSI = train.all[trainPosition].prototype.brake.linePSI;
                    if (reservoirPSI > linePSI) {
                        //triple valve APPLY
                        train.all[trainPosition].prototype.brake.tripleValve  = "A";
                        
                    }
                    else if (reservoirPSI < linePSI) {
                        //triple valve RELEASE
                        train.all[trainPosition].prototype.brake.tripleValve  = "R";
                        
                    }
                    else if (reservoirPSI == linePSI) {
                        //triple valve LAP
                        train.all[trainPosition].prototype.brake.tripleValve  = "L";
                        
                    }
                },
                reservoirPSI: 90, //reservoir psi
                cylinderPSI: 0, //brake cylinder psi
                linePSI: 90, //brake pipe psi
                tripleValve: "R", //can be "R"elease,  "A"pply, or "L"ap
                waitingOnChange: false,
            },
            coefficientOf: {
                rollingResistance : 0.01, //rolling resistance
                genResistance: 0, //arbitrary other resistance value that is left to account for friction bearings/roller bearings etc.
            },
            tmp: {//junk for intervals and such to use as storage
            }
        }
    }
}