{
    "docs": [
        {
            "location": "/", 
            "text": "Quickstart Guide\n#\n\n\nPrerequisites\n#\n\n\n\n\n\n\nA DCC layout connected to JMRI.\n\n\n\n\n\n\nA web server.\n I recommend using a Linux machine (such as the Raspberry Pi) for this, but you can run it on any OS you like.\n\n\n\n\nHow to set up Apache web server on Windows\n\n\nHow to set up lighttpd web server on Linux\n - Ignore the part about installing PHP\n\n\nMac OSX is not covered in this guide, but if you install any simple web server it should work fine.\n\n\n\n\n\n\nBasic JavaScript/JSON knowledge.\n Due to the work-in-progress nature of the project, you will have to edit a few JSON files to configure it.\n\n\n\n\nInstallation\n#\n\n\n\n\nDownload ZephyrCab from GitHub as a zipped archive.\n\n\nExtract with your favorite archiving program, and save the contents in your web server root. On Linux this is typically \n/var/www\n.\n\n\nTest by visiting \nlocalhost\n in a web browser. You should be greeted with a \"Connection Settings\" page. If so, you've installed ZephyrCab correctly!\n\n\n\n\nSetup\n#\n\n\nSome JavaScript/JSON knowledge is highly recommended. Eventually I will bundle tools for easy setup, but right now the project is still very much under development, and requires editing some JSON files to configure it.\n\n\n1. Make sure JMRI's web server is running.\n See \nJMRI Documentation\n for more information.\n\n\n2. Configure automatic connection to your layout in \n/cfg/settings.json\n.\n Simply edit the \ncfg.ip\n and \ncfg.port\n lines like this:\n\n\ncfg.ip = \n10.10.39.85\n;\ncfg.port = 12080;\n\n\n\n\nOnce that's done, ZephyrCab should automatically connect to your JMRI install every time you open it.\n\n\n3. Configure \nbundles.json\n with your locomotive roster and DCC decoder information.\n This requires some knowledge of JSON syntax, and I am in the process of rewriting docs for this. Currently, the only supported locomotive is the EMD F7-A. I will update the documentation once the process of configuring \nbundles.json\n has been refined.\n\n\n\n\nOnce you have your \nbundles.json\n set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on \nthe project's GitHub page\n.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#quickstart-guide", 
            "text": "", 
            "title": "Quickstart Guide"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "A DCC layout connected to JMRI.    A web server.  I recommend using a Linux machine (such as the Raspberry Pi) for this, but you can run it on any OS you like.   How to set up Apache web server on Windows  How to set up lighttpd web server on Linux  - Ignore the part about installing PHP  Mac OSX is not covered in this guide, but if you install any simple web server it should work fine.    Basic JavaScript/JSON knowledge.  Due to the work-in-progress nature of the project, you will have to edit a few JSON files to configure it.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#installation", 
            "text": "Download ZephyrCab from GitHub as a zipped archive.  Extract with your favorite archiving program, and save the contents in your web server root. On Linux this is typically  /var/www .  Test by visiting  localhost  in a web browser. You should be greeted with a \"Connection Settings\" page. If so, you've installed ZephyrCab correctly!", 
            "title": "Installation"
        }, 
        {
            "location": "/#setup", 
            "text": "Some JavaScript/JSON knowledge is highly recommended. Eventually I will bundle tools for easy setup, but right now the project is still very much under development, and requires editing some JSON files to configure it.  1. Make sure JMRI's web server is running.  See  JMRI Documentation  for more information.  2. Configure automatic connection to your layout in  /cfg/settings.json .  Simply edit the  cfg.ip  and  cfg.port  lines like this:  cfg.ip =  10.10.39.85 ;\ncfg.port = 12080;  Once that's done, ZephyrCab should automatically connect to your JMRI install every time you open it.  3. Configure  bundles.json  with your locomotive roster and DCC decoder information.  This requires some knowledge of JSON syntax, and I am in the process of rewriting docs for this. Currently, the only supported locomotive is the EMD F7-A. I will update the documentation once the process of configuring  bundles.json  has been refined.   Once you have your  bundles.json  set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on  the project's GitHub page .", 
            "title": "Setup"
        }, 
        {
            "location": "/userguide/configuring-settings-json/", 
            "text": "Configuring Basic Settings with \nsettings.json\n#\n\n\nZephyrCab has a few basic configuration options in \n/cfg/settings.json\n.\n\n\nThe config file \ndoes not\n require any programming knowledge to edit; simply follow this guide. Be sure to match the syntax exactly (i.e. put quotes where there are quotes, semicolons where there are semicolons, etc)\n\n\nAutomatic Layout Connection\n#\n\n\nZephyrCab can automatically connect to your layout each time you open it. This is convenient (nobody likes to remember IP addresses).\n\n\nTo enable this feature, simply add the IP address of your JMRI computer and the port of your JMRI web server. By default, the JMRI web server runs on port 12080. Make sure to end each line with a semicolon. If you don't know your computer's IP address, you can find it with the \nipconfig\n command in Windows or the \nifconfig\n command on Linux.\n\n\ncfg.ip = \n192.168.1.12\n;\ncfg.port = 12080;\n\n\n\n\nTo disable this feature, simply remove the right side of those two lines, as shown below. This will allow you to specify an IP address and connect manually.\n\n\ncfg.ip;\ncfg.port;\n\n\n\n\nDefault Brake System Pressure (feed valve)\n#\n\n\nNorth American freight train brakes operate based on an inverse relationship between brake line pressure and brake cylinder pressure. When the brake line pressure decreases, the brake cylinder pressure increases, applying the brakes.\n\n\nAll brake systems have a maximum brake line pressure, which will release the brakes completely. This is set via the feed valve in the locomotive cab. ZephyrCab's default feed valve setting is 90psi, the most common pressure. However, some railroads use different pressures, and if you are modeling such a railroad it may be inconvenient for you to change the feed valve pressure every time you use ZephyrCab.\n\n\nBy adjusting the \ncfg.brakes.defaultFeedValveSetting\n option, you can change the default feed valve pressure of 90psi.\n Simply edit the integer value. In the example below, we change the default feed valve pressure to 110psi.\n\n\ncfg.brakes.defaultFeedValveSetting = 110;\n\n\n\n\nDo not include \"psi\" on the end of your number!\n\n\nDisable Push Notifications\n#\n\n\nThis is an experimental feature and has not been documented yet, as it may be removed in future releases.\n\n\nDeveloper Options\n#\n\n\nThe options below are specifically geared towards developers tinkering with the program. Normal users shouldn't need these features.\n\n\nLog All WebSockets Messages\n#\n\n\nThis is useful in debugging communication between JMRI and ZephyrCab. When \ncfg.logallmessages === true\n, ZephyrCab will dump all WebSockets messages to the console via \nconsole.log()\n. A timestamp is also included for each log entry.\n\n\nTo enable WebSockets logging, set \ncfg.logallmessages\n to \ntrue\n, as shown below.\n\n\ncfg.logallmessages = true;\n\n\n\n\nIt is not recommended to enable this unless you need it, as it sometimes creates an absurd amount of \nconsole.log()\n calls, and may bog down your browser.\n\n\nDebugging Toasts\n#\n\n\nZephyrCab utilizes the excellent \nMaterializeCSS Framework\n, which provides a notification function called a toast. You can create a toast with \nMaterialize.toast()\n. See this page on the Materialize documentation to learn more.\n\n\nWhat are debug toasts?\n#\n\n\nZephyrCab has a small global function called \ndebugToast\n that is a wrapper for the toast function. It is used to give the user information in instances where \nconsole.log\n is not ideal. When the \ncfg.debugToasts\n boolean is \nfalse\n, the function simply does nothing. However, when \ncfg.debugToasts\n is set to \ntrue\n, the debug toasts are passed through to \nMaterialize.toast()\n as normal.\n\n\nIn short, setting \ncfg.debugToasts\n to \ntrue\n will turn on small pop-up debugging messages built in to some parts of the ZephyrCab code.\n If you are using ZephyrCab locally in a development environment, I recommend leaving debugToasts on, as they are relatively unobtrusive and provide useful information.\n\n\ncfg.logallmessages = true; //enables debug toasts\n\ncfg.logallmessages = false; //disables debug toasts\n\n\n\n\n\n\nTroubleshooting\n#\n\n\nIf ZephyrCab misbehaves after an edit to the config file, please double check your syntax.\n\n\nIf you encounter a problem with your config file, please \nmake an issue on GitHub\n and I will do my best to assist you.\n\n\nFeature Requests\n#\n\n\nIf you have something you'd like to add to \nsettings.json\n, please \nmake an issue on GitHub\n with your feature request, or better yet build it yourself and fork/pull request. All contributions are welcome!", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#configuring-basic-settings-with-settingsjson", 
            "text": "ZephyrCab has a few basic configuration options in  /cfg/settings.json .  The config file  does not  require any programming knowledge to edit; simply follow this guide. Be sure to match the syntax exactly (i.e. put quotes where there are quotes, semicolons where there are semicolons, etc)", 
            "title": "Configuring Basic Settings with settings.json"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#automatic-layout-connection", 
            "text": "ZephyrCab can automatically connect to your layout each time you open it. This is convenient (nobody likes to remember IP addresses).  To enable this feature, simply add the IP address of your JMRI computer and the port of your JMRI web server. By default, the JMRI web server runs on port 12080. Make sure to end each line with a semicolon. If you don't know your computer's IP address, you can find it with the  ipconfig  command in Windows or the  ifconfig  command on Linux.  cfg.ip =  192.168.1.12 ;\ncfg.port = 12080;  To disable this feature, simply remove the right side of those two lines, as shown below. This will allow you to specify an IP address and connect manually.  cfg.ip;\ncfg.port;", 
            "title": "Automatic Layout Connection"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#default-brake-system-pressure-feed-valve", 
            "text": "North American freight train brakes operate based on an inverse relationship between brake line pressure and brake cylinder pressure. When the brake line pressure decreases, the brake cylinder pressure increases, applying the brakes.  All brake systems have a maximum brake line pressure, which will release the brakes completely. This is set via the feed valve in the locomotive cab. ZephyrCab's default feed valve setting is 90psi, the most common pressure. However, some railroads use different pressures, and if you are modeling such a railroad it may be inconvenient for you to change the feed valve pressure every time you use ZephyrCab.  By adjusting the  cfg.brakes.defaultFeedValveSetting  option, you can change the default feed valve pressure of 90psi.  Simply edit the integer value. In the example below, we change the default feed valve pressure to 110psi.  cfg.brakes.defaultFeedValveSetting = 110;  Do not include \"psi\" on the end of your number!", 
            "title": "Default Brake System Pressure (feed valve)"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#disable-push-notifications", 
            "text": "This is an experimental feature and has not been documented yet, as it may be removed in future releases.", 
            "title": "Disable Push Notifications"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#developer-options", 
            "text": "The options below are specifically geared towards developers tinkering with the program. Normal users shouldn't need these features.", 
            "title": "Developer Options"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#log-all-websockets-messages", 
            "text": "This is useful in debugging communication between JMRI and ZephyrCab. When  cfg.logallmessages === true , ZephyrCab will dump all WebSockets messages to the console via  console.log() . A timestamp is also included for each log entry.  To enable WebSockets logging, set  cfg.logallmessages  to  true , as shown below.  cfg.logallmessages = true;  It is not recommended to enable this unless you need it, as it sometimes creates an absurd amount of  console.log()  calls, and may bog down your browser.", 
            "title": "Log All WebSockets Messages"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#debugging-toasts", 
            "text": "ZephyrCab utilizes the excellent  MaterializeCSS Framework , which provides a notification function called a toast. You can create a toast with  Materialize.toast() . See this page on the Materialize documentation to learn more.", 
            "title": "Debugging Toasts"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#what-are-debug-toasts", 
            "text": "ZephyrCab has a small global function called  debugToast  that is a wrapper for the toast function. It is used to give the user information in instances where  console.log  is not ideal. When the  cfg.debugToasts  boolean is  false , the function simply does nothing. However, when  cfg.debugToasts  is set to  true , the debug toasts are passed through to  Materialize.toast()  as normal.  In short, setting  cfg.debugToasts  to  true  will turn on small pop-up debugging messages built in to some parts of the ZephyrCab code.  If you are using ZephyrCab locally in a development environment, I recommend leaving debugToasts on, as they are relatively unobtrusive and provide useful information.  cfg.logallmessages = true; //enables debug toasts\n\ncfg.logallmessages = false; //disables debug toasts", 
            "title": "What are debug toasts?"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#troubleshooting", 
            "text": "If ZephyrCab misbehaves after an edit to the config file, please double check your syntax.  If you encounter a problem with your config file, please  make an issue on GitHub  and I will do my best to assist you.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#feature-requests", 
            "text": "If you have something you'd like to add to  settings.json , please  make an issue on GitHub  with your feature request, or better yet build it yourself and fork/pull request. All contributions are welcome!", 
            "title": "Feature Requests"
        }
    ]
}