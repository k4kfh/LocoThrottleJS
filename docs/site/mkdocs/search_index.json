{
    "docs": [
        {
            "location": "/", 
            "text": "What is ZephyrCab?\n#\n\n\nZephyrCab combines a train simulator physics engine with \nJMRI\n, making your model locomotives handle just like the real thing. You get an 8-position notched throttle, a painstakingly accurate Westinghouse brake system, wheel slip, and ultra-realistic acceleration.\n\n\n\n\nCompatiblity\n#\n\n\nAny JMRI-connected layout will work with ZephyrCab.\n\n\nAny\n DCC decoder is supported. More extensive support is available for certain sound decoders, offering greater realism.\n\n\nGet Started\n#\n\n\n\n\nTry it out for yourself\n\n\nNerds: Read more about how ZephyrCab works\n\n\nJoin the Gitter chat for support", 
            "title": "Welcome"
        }, 
        {
            "location": "/#what-is-zephyrcab", 
            "text": "ZephyrCab combines a train simulator physics engine with  JMRI , making your model locomotives handle just like the real thing. You get an 8-position notched throttle, a painstakingly accurate Westinghouse brake system, wheel slip, and ultra-realistic acceleration.", 
            "title": "What is ZephyrCab?"
        }, 
        {
            "location": "/#compatiblity", 
            "text": "Any JMRI-connected layout will work with ZephyrCab.  Any  DCC decoder is supported. More extensive support is available for certain sound decoders, offering greater realism.", 
            "title": "Compatiblity"
        }, 
        {
            "location": "/#get-started", 
            "text": "Try it out for yourself  Nerds: Read more about how ZephyrCab works  Join the Gitter chat for support", 
            "title": "Get Started"
        }, 
        {
            "location": "/quick-start/", 
            "text": "Quickstart Guide\n#\n\n\nZephyrCab is ready for you to test drive! It is fairly early in development, so if you run into issues please hop in the Gitter chat and I will help you out.\n\n\n\n\nPrerequisites\n#\n\n\n\n\nA DCC layout connected to JMRI.\n\n\n\n\nNo seriously. That's it.\n\n\nInstallation\n#\n\n\nThe screenshots below are from a machine running Linux, so they may look a little different, but the procedure will be essentially the same for Windows, Mac, and Linux.\n\n\n\n\nDownload the latest ZephyrCab release here.\n\n\n\n\nFind your JMRI profile directory.\n You can do this by opening JMRI and clicking Help \n Locations, as shown below.\n\n\n\n\n\n\n\n\nOpen your JMRI profile directory.\n You can just click \"Open profile location\" from inside the JMRI Locations dialog. In my case, my profile directory was \n/home/hampton/.jmri/My_JMRI_Railroad\n, but yours may be a little different.\n\n\n\n\n\n\n\n\nCreate a folder called \nweb\n inside the profile location.\n Your system may already have this folder, but if it doesn't, just make a new folder called \nweb\n.\n\n\n\n\n\n\n\n\n\n\nExtract the ZephyrCab download into the \nweb\n folder.\n When you downloaded ZephyrCab, you should have gotten a ZIP file, so just extract its contents into \n/wherever/your/JMRI/profile/is/web\n.\n\n\n\n\n\n\nRename the folder to \nzephyrcab\n.\n This step is technically optional, but makes things easier, so I recommend it.\n\n\n\n\n\n\nIf you haven't used it before, start your JMRI web server.\n You can do this in Edit \n Preferences \n Web Server. Check the box for \"Start automatically with application\".\n\n\n\n\n\n\n\n\nOpen your ZephyrCab in a web browser.\n Google Chrome is officially supported, though Firefox will probably work. No promises otherwise.\n\n\n\n\nIf you're opening it from your JMRI machine, you can just use \nhttp://localhost:12080/web/zephyrcab\n\n\nOtherwise, the URL will be \nhttp://your-jmri-ip-address:12080/web/zephyrcab\n if you've followed this guide correctly.\n\n\nIf you don't know your JMRI PC's IP address, \nclick here to learn how to find it.\n It will probably be in the form \n192.168.1.something\n or \n172.16.something.something\n, but could be different.\n\n\n\n\n\n\n\n\nConfigure \nbundles.json\n with your locomotive roster and DCC decoder information.\n This requires some knowledge of JSON syntax, and I am in the process of rewriting docs for this. Currently, the only supported locomotive is the EMD F7-A. For now, \nclick here to  learn how to set this up.\n\n\n\n\n\n\nOnce you have your \nbundles.json\n set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on \nthe project's GitHub page\n.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quick-start/#quickstart-guide", 
            "text": "ZephyrCab is ready for you to test drive! It is fairly early in development, so if you run into issues please hop in the Gitter chat and I will help you out.", 
            "title": "Quickstart Guide"
        }, 
        {
            "location": "/quick-start/#prerequisites", 
            "text": "A DCC layout connected to JMRI.   No seriously. That's it.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/quick-start/#installation", 
            "text": "The screenshots below are from a machine running Linux, so they may look a little different, but the procedure will be essentially the same for Windows, Mac, and Linux.   Download the latest ZephyrCab release here.   Find your JMRI profile directory.  You can do this by opening JMRI and clicking Help   Locations, as shown below.     Open your JMRI profile directory.  You can just click \"Open profile location\" from inside the JMRI Locations dialog. In my case, my profile directory was  /home/hampton/.jmri/My_JMRI_Railroad , but yours may be a little different.     Create a folder called  web  inside the profile location.  Your system may already have this folder, but if it doesn't, just make a new folder called  web .      Extract the ZephyrCab download into the  web  folder.  When you downloaded ZephyrCab, you should have gotten a ZIP file, so just extract its contents into  /wherever/your/JMRI/profile/is/web .    Rename the folder to  zephyrcab .  This step is technically optional, but makes things easier, so I recommend it.    If you haven't used it before, start your JMRI web server.  You can do this in Edit   Preferences   Web Server. Check the box for \"Start automatically with application\".     Open your ZephyrCab in a web browser.  Google Chrome is officially supported, though Firefox will probably work. No promises otherwise.   If you're opening it from your JMRI machine, you can just use  http://localhost:12080/web/zephyrcab  Otherwise, the URL will be  http://your-jmri-ip-address:12080/web/zephyrcab  if you've followed this guide correctly.  If you don't know your JMRI PC's IP address,  click here to learn how to find it.  It will probably be in the form  192.168.1.something  or  172.16.something.something , but could be different.     Configure  bundles.json  with your locomotive roster and DCC decoder information.  This requires some knowledge of JSON syntax, and I am in the process of rewriting docs for this. Currently, the only supported locomotive is the EMD F7-A. For now,  click here to  learn how to set this up.    Once you have your  bundles.json  set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on  the project's GitHub page .", 
            "title": "Installation"
        }, 
        {
            "location": "/userguide/configuring-settings-json/", 
            "text": "Configuring ZephyrCab\n#\n\n\nZephyrCab is configured with \n/cfg/settings.json\n.\n\n\nYou don't need any programming knowledge, simply follow this guide. If you run into a problem, join the Gitter chat and I'll help you.\n\n\nAutomatic Layout Connection\n#\n\n\nNot recommended for most users!\n\n\nBy default, ZephyrCab assumes it's running on a JMRI web server, and it will automatically connect to that. If for some reason you're running ZephyrCab on an external web server, you can configure automatic connection by setting the following values:\n\n\ncfg.webServer = \nexternal\n; //not setting this or setting it to \njmri\n invokes the default behavior\ncfg.ip = \n192.168.1.10\n; //your JMRI PC\ns IP address\ncfg.port = 12080; //your JMRI web server\ns port\n\n\n\n\nDefault Brake System Pressure (feed valve)\n#\n\n\nNorth American freight train brakes operate based on an inverse relationship between brake line pressure and brake cylinder pressure. When the brake line pressure decreases, the brake cylinder pressure increases, applying the brakes.\n\n\nAll brake systems have a maximum brake line pressure, which will release the brakes completely. This is set via the feed valve in the locomotive cab. ZephyrCab's default feed valve setting is 90psi, the most common pressure. However, some railroads use different pressures, and if you are modeling such a railroad it may be inconvenient for you to change the feed valve pressure every time you use ZephyrCab.\n\n\nBy adjusting the \ncfg.brakes.defaultFeedValveSetting\n option, you can change the default feed valve pressure of 90psi.\n Simply edit the integer value. In the example below, we change the default feed valve pressure to 110psi.\n\n\ncfg\n.\nbrakes\n.\ndefaultFeedValveSetting\n \n=\n \n110\n;\n\n\n\n\nDo not include \"psi\" on the end of your number!\n\n\nDeveloper Options\n#\n\n\nThe options below are specifically geared towards developers tinkering with the program. Normal users shouldn't need these features.\n\n\nLog All WebSockets Messages\n#\n\n\nThis is useful in debugging communication between JMRI and ZephyrCab. When \ncfg.logallmessages === true\n, ZephyrCab will dump all WebSockets messages to the console via \nconsole.log()\n. A timestamp is also included for each log entry.\n\n\nTo enable WebSockets logging, set \ncfg.logallmessages\n to \ntrue\n, as shown below.\n\n\ncfg\n.\nlogallmessages\n \n=\n \ntrue\n;\n\n\n\n\n\nIt is not recommended to enable this unless you need it, as it sometimes creates an absurd amount of \nconsole.log()\n calls, and may bog down your browser.\n\n\nDebugging Toasts\n#\n\n\nZephyrCab utilizes the excellent \nMaterializeCSS Framework\n, which provides a notification function called a toast. You can create a toast with \nMaterialize.toast()\n. See this page on the Materialize documentation to learn more.\n\n\nWhat are debug toasts?\n#\n\n\nZephyrCab has a small global function called \ndebugToast\n that is a wrapper for the toast function. It is used to give the user information in instances where \nconsole.log\n is not ideal. When the \ncfg.debugToasts\n boolean is \nfalse\n, the function simply does nothing. However, when \ncfg.debugToasts\n is set to \ntrue\n, the debug toasts are passed through to \nMaterialize.toast()\n as normal.\n\n\nIn short, setting \ncfg.debugToasts\n to \ntrue\n will turn on small pop-up debugging messages built in to some parts of the ZephyrCab code.\n If you are using ZephyrCab locally in a development environment, I recommend leaving debugToasts on, as they are relatively unobtrusive and provide useful information.\n\n\ncfg\n.\nlogallmessages\n \n=\n \ntrue\n;\n \n//enables debug toasts\n\n\n\ncfg\n.\nlogallmessages\n \n=\n \nfalse\n;\n \n//disables debug toasts\n\n\n\n\n\n\n\nTroubleshooting\n#\n\n\nIf ZephyrCab misbehaves after an edit to the config file, please double check your syntax.\n\n\nIf you encounter a problem with your config file, please \nmake an issue on GitHub\n and I will do my best to assist you.\n\n\nFeature Requests\n#\n\n\nIf you have something you'd like to add to \nsettings.json\n, please \nmake an issue on GitHub\n with your feature request, or better yet build it yourself and fork/pull request. All contributions are welcome!", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#configuring-zephyrcab", 
            "text": "ZephyrCab is configured with  /cfg/settings.json .  You don't need any programming knowledge, simply follow this guide. If you run into a problem, join the Gitter chat and I'll help you.", 
            "title": "Configuring ZephyrCab"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#automatic-layout-connection", 
            "text": "Not recommended for most users!  By default, ZephyrCab assumes it's running on a JMRI web server, and it will automatically connect to that. If for some reason you're running ZephyrCab on an external web server, you can configure automatic connection by setting the following values:  cfg.webServer =  external ; //not setting this or setting it to  jmri  invokes the default behavior\ncfg.ip =  192.168.1.10 ; //your JMRI PC s IP address\ncfg.port = 12080; //your JMRI web server s port", 
            "title": "Automatic Layout Connection"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#default-brake-system-pressure-feed-valve", 
            "text": "North American freight train brakes operate based on an inverse relationship between brake line pressure and brake cylinder pressure. When the brake line pressure decreases, the brake cylinder pressure increases, applying the brakes.  All brake systems have a maximum brake line pressure, which will release the brakes completely. This is set via the feed valve in the locomotive cab. ZephyrCab's default feed valve setting is 90psi, the most common pressure. However, some railroads use different pressures, and if you are modeling such a railroad it may be inconvenient for you to change the feed valve pressure every time you use ZephyrCab.  By adjusting the  cfg.brakes.defaultFeedValveSetting  option, you can change the default feed valve pressure of 90psi.  Simply edit the integer value. In the example below, we change the default feed valve pressure to 110psi.  cfg . brakes . defaultFeedValveSetting   =   110 ;   Do not include \"psi\" on the end of your number!", 
            "title": "Default Brake System Pressure (feed valve)"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#developer-options", 
            "text": "The options below are specifically geared towards developers tinkering with the program. Normal users shouldn't need these features.", 
            "title": "Developer Options"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#log-all-websockets-messages", 
            "text": "This is useful in debugging communication between JMRI and ZephyrCab. When  cfg.logallmessages === true , ZephyrCab will dump all WebSockets messages to the console via  console.log() . A timestamp is also included for each log entry.  To enable WebSockets logging, set  cfg.logallmessages  to  true , as shown below.  cfg . logallmessages   =   true ;   It is not recommended to enable this unless you need it, as it sometimes creates an absurd amount of  console.log()  calls, and may bog down your browser.", 
            "title": "Log All WebSockets Messages"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#debugging-toasts", 
            "text": "ZephyrCab utilizes the excellent  MaterializeCSS Framework , which provides a notification function called a toast. You can create a toast with  Materialize.toast() . See this page on the Materialize documentation to learn more.", 
            "title": "Debugging Toasts"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#what-are-debug-toasts", 
            "text": "ZephyrCab has a small global function called  debugToast  that is a wrapper for the toast function. It is used to give the user information in instances where  console.log  is not ideal. When the  cfg.debugToasts  boolean is  false , the function simply does nothing. However, when  cfg.debugToasts  is set to  true , the debug toasts are passed through to  Materialize.toast()  as normal.  In short, setting  cfg.debugToasts  to  true  will turn on small pop-up debugging messages built in to some parts of the ZephyrCab code.  If you are using ZephyrCab locally in a development environment, I recommend leaving debugToasts on, as they are relatively unobtrusive and provide useful information.  cfg . logallmessages   =   true ;   //enables debug toasts  cfg . logallmessages   =   false ;   //disables debug toasts", 
            "title": "What are debug toasts?"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#troubleshooting", 
            "text": "If ZephyrCab misbehaves after an edit to the config file, please double check your syntax.  If you encounter a problem with your config file, please  make an issue on GitHub  and I will do my best to assist you.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#feature-requests", 
            "text": "If you have something you'd like to add to  settings.json , please  make an issue on GitHub  with your feature request, or better yet build it yourself and fork/pull request. All contributions are welcome!", 
            "title": "Feature Requests"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/", 
            "text": "Adding your locomotives with \nbundles.json\n#\n\n\nZephyrCab requires a substantial amount of information for each locomotive in order to produce an accurate simulation. Everything from weight, horsepower, length, drivetrain efficiency, and more is taken into account. It also requires information on DCC decoder functions to produce the correct sound/lighting on your model, and a speed table for your model to produce scale speeds*.\n\n\nWhat's a bundle?\n#\n\n\nZephyrCab stores this information in \"bundles,\" which are each linked to a specific roster entry in your JMRI roster. This allows ZephyrCab to easily bind all the required information to a single locomotive on your layout, making it quick and easy to select a locomotive.\n\n\nSetting up a locomotive bundle\n#\n\n\nBundles are stored in JSON (JavaScript Object Notation). Basic syntax is shown below, and you can \nlearn more about JSON here.\n\n\n{\n\n    \nitem\n:\nvalue\n,\n\n    \nparent-item\n:\n \n{\n\n        \nchild\n:\nsome string of text\n,\n\n        \nanotherchild\n:\n42\n,\n\n    \n},\n\n    \nsome boolean\n:\ntrue\n,\n\n\n}\n\n\n\n\n\nAs you may have guessed, \n/cfg/bundles.json\n contains all your bundles. However, the information stored here doesn't tell everything. ZephyrCab relies on \n/cfg/decoders.js\n for the DCC decoder abstraction layer, so you'll need to make sure your decoder is supported.\n\n\nExample Setup\n#\n\n\nHere, I'll go through the entire process for adding a locomotive to your \nbundles.json\n file.\n\n\nMake a copy of your \nbundles.json\n and save it somewhere else in case you need to undo your changes.\n\n\n1. Determine if your combination of prototype, model, and DCC decoder are supported.\n For this example, I have a Bachmann F7-A with a LokSound Select DCC decoder in it. So my specs are:\n\n\n\n\nModel:\n Bachmann F7-A\n\n\nPrototype:\n EMD F7-A\n\n\nDCC Decoder:\n LokSound Select with EMD 567 Sound File\n\n\n\n\nBy checking the Supported Locomotives/Decoders table, I confirm my specs are supported.\n\n\n2. Create a JSON object with your prototype bundle and your model's JMRI roster name.\n You'll need to use a text editor to do this. If you're on Windows, use \nNotepad++\n. If you're not familiar with basic JSON syntax, it would help you to \nread this.\n\n\nThe object should be structured like this (remember that lines with \n//\n are comments):\n\n\nYour JMRI Roster Entry Name\n:\n{\n\n    \ntype:\nlocomotive\n,\n\n    \nmodel:{\n\n        \n//Scale\n \nspeed\n \nfunction.\n \nThis\n \nis\n \na\n \nWIP\n\n        \nspeed:function(mph)\n \n{\n\n            \nspeed\n \n=\n \nmph;\n\n            \nreturn\n \nspeed;\n\n        \n}\n\n    \n}\n\n    \n//prototype\n \nentry\n \nstuff\n\n\n}\n\n\n\n\n\nOnce I add the appropriate information, my code looks like this. I cut off the majority of the prototype code to save space on the page, but you get the idea.\n\n\nCBQ2\n \n:\n \n{\n \n//my\n \nJMRI\n \nroster\n \nname\n \nis\n \nCBQ2\n \n(without\n \nthe\n \nquotes)\n\n        \ntype\n:\n \nlocomotive\n,\n\n        \nmodel:{\n\n            \nspeed:function(mph)\n \n{\n\n                \nmph\n \n=\n \nspeed;\n \n//totally\n \nnot\n \ncorrect\n \nbut\n \nit\n \nis\n \na\n \nfunctional\n \nexample\n\n                \nreturn\n \nspeed;\n\n            \n}\n\n        \n},\n\n\n        \n//This\n \nbegins\n \nthe\n \nactual\n \nprototype\n \nobject,\n \nwhich\n \nyou\nll\n \nprobably\n \nwant\n \nto\n \ncopy\n \nand\n \npaste\n \nfrom\n \none\n \nof\n \nour\n \nsupported\n \nlocomotives,\n \nthough\n \nit\n \nis\n \npossible\n \nto\n \nmake\n \nyour\n \nown.\n\n        \nprototype:\n{\n\n            \nbuilder\n \n:\n \nEMD\n,\n \n//This\n \nis\n \ndisplayed\n \nto\n \nthe\n \nclient\n \nand\n \ncan\n \nbe\n \nanything\n\n            \nname\n \n:\n \nF7-A\n,\n \n//This\n \nis\n \nalso\n \ndisplayed\n \nto\n \nthe\n \nclient\n \nand\n \ncan\n \nbe\n \nanything\n\n            \ntype\n \n:\n \nlocomotive\n,\n \n//This\n \nmust\n \nbe\n \nlocomotive\n\n            \nweight\n \n:\n \n250000\n,\n \n//Weight\n \nof\n \nthe\n \nlocomotive\n \nin\n \nlbs\n\n            \nmaxHP\n \n:\n \n1500\n,\n \n//Horsepower\n \nof\n \nthe\n \nlocomotive\n\n            \nnotchRPM\n \n:\n \n[\n300\n,\n \n362\n,\n \n425\n,\n \n487\n,\n \n550\n,\n \n613\n,\n \n675\n,\n \n738\n,\n \n800\n],\n\n            \nnotchMaxSpeeds\n \n:\n \n[\nnull\n,\n \n7.5\n,\n \n15\n,\n \n22.5\n,\n \n30\n,\n \n37.5\n,\n \n45\n,\n \n52.5\n,\n \n60\n],\n\n            \nengineRunning\n:\n \n0\n,\n \n//0\n \nor\n \n1\n \n-\n \n1\n \nis\n \non,\n \n0\n \nis\n \noff\n\n            \nfuel\n \n:\n \n{\n\n                \nusage\n \n:\n \n[3.5,\n \n6.5,\n \n14.5,\n \n23.4,\n \n33.3,\n \n45.7,\n \n59.6,\n \n75.3,\n \n93.1],\n \n//array\n \nin\n \ngal/hr,\n \nby\n \nnotch\n\n                \ncapacity\n \n:\n \n1200,\n \n//fuel\n \ntank\n \nin\n \nGAL\n\n            \n}\n,\n\n\n            \n//tons\n \nmore\n \ncode\n \nin\n \nhere;\n \nI\n \ncut\n \nit\n \nout\n \nfor\n \nreadability\n\n        \n},\n\n    \n},\n\n\n\n\n\nNow we have the code to add to the \nbundles.locomotives\n object.\n\n\n3. Add the code to the \nbundles.locomotives\n object, inside \ncfg/bundles.json\n.\n\n\nThis is where it's helpful to know basic JSON syntax. The hierarchy here is something like this:\n\n\nbundles.locomotives\n \n=\n \n{\n\n    \nSome Roster Entry\n:{\n\n        \n//all\n \nthe\n \ninformation\n\n    \n},\n\n    \nAnother Roster Entry\n:{\n\n        \n//information\n\n    \n}\n\n\n}\n\n\n\n\n\nJust add the code above into your file. Mine looked like this (sample below shows only the top).\n\n\nbundles.locomotives\n \n=\n \n{\n\n    \nCBQ2\n \n:\n \n{\n\n        \ntype:\n \nlocomotive\n,\n\n        \nmodel:{\n\n            \nspeed:function(mph)\n \n{\n\n                \nmph\n \n=\n \nspeed;\n \n//totally\n \nnot\n \ncorrect\n \nbut\n \nit\n \nis\n \na\n \nfunctional\n \nexample\n\n                \nreturn\n \nspeed;\n\n            \n}\n\n        \n}\n,\n\n        \nprototype:\n{\n\n            \nbuilder\n \n:\n \nEMD\n,\n \n//This\n \nis\n \ndisplayed\n \nto\n \nthe\n \nclient\n \nand\n \ncan\n \nbe\n \nanything\n\n            \nname\n \n:\n \nF7-A\n,\n \n//This\n \nis\n \nalso\n \ndisplayed\n \nto\n \nthe\n \nclient\n \nand\n \ncan\n \nbe\n \nanything\n\n            \ntype\n \n:\n \nlocomotive\n,\n \n//This\n \nmust\n \nbe\n \nlocomotive\n\n            \nweight\n \n:\n \n250000\n,\n \n//Weight\n \nof\n \nthe\n \nlocomotive\n \nin\n \nlbs\n\n            \nmaxHP\n \n:\n \n1500\n,\n \n//Horsepower\n \nof\n \nthe\n \nlocomotive\n\n\n\n\n\nNow you should be able to load up ZephyrCab and connect to your layout. Once you've connected, a list of whatever roster entries you've added will appear as locomotives you can add to your train. Roster entries you don't set up in \nbundles.json\n will simply be ignored. You should be able to add the locomotive to your train and start driving it. Have fun!\n\n\n\n\nIf you encounter a problem at any point in this guide, please \nmake an issue on GitHub\n, and I'll be glad to assist you.", 
            "title": "Adding your Locomotives"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#adding-your-locomotives-with-bundlesjson", 
            "text": "ZephyrCab requires a substantial amount of information for each locomotive in order to produce an accurate simulation. Everything from weight, horsepower, length, drivetrain efficiency, and more is taken into account. It also requires information on DCC decoder functions to produce the correct sound/lighting on your model, and a speed table for your model to produce scale speeds*.", 
            "title": "Adding your locomotives with bundles.json"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#whats-a-bundle", 
            "text": "ZephyrCab stores this information in \"bundles,\" which are each linked to a specific roster entry in your JMRI roster. This allows ZephyrCab to easily bind all the required information to a single locomotive on your layout, making it quick and easy to select a locomotive.", 
            "title": "What's a bundle?"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#setting-up-a-locomotive-bundle", 
            "text": "Bundles are stored in JSON (JavaScript Object Notation). Basic syntax is shown below, and you can  learn more about JSON here.  { \n     item : value , \n     parent-item :   { \n         child : some string of text , \n         anotherchild : 42 , \n     }, \n     some boolean : true ,  }   As you may have guessed,  /cfg/bundles.json  contains all your bundles. However, the information stored here doesn't tell everything. ZephyrCab relies on  /cfg/decoders.js  for the DCC decoder abstraction layer, so you'll need to make sure your decoder is supported.", 
            "title": "Setting up a locomotive bundle"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#example-setup", 
            "text": "Here, I'll go through the entire process for adding a locomotive to your  bundles.json  file.  Make a copy of your  bundles.json  and save it somewhere else in case you need to undo your changes.  1. Determine if your combination of prototype, model, and DCC decoder are supported.  For this example, I have a Bachmann F7-A with a LokSound Select DCC decoder in it. So my specs are:   Model:  Bachmann F7-A  Prototype:  EMD F7-A  DCC Decoder:  LokSound Select with EMD 567 Sound File   By checking the Supported Locomotives/Decoders table, I confirm my specs are supported.  2. Create a JSON object with your prototype bundle and your model's JMRI roster name.  You'll need to use a text editor to do this. If you're on Windows, use  Notepad++ . If you're not familiar with basic JSON syntax, it would help you to  read this.  The object should be structured like this (remember that lines with  //  are comments):  Your JMRI Roster Entry Name : { \n     type: locomotive , \n     model:{ \n         //Scale   speed   function.   This   is   a   WIP \n         speed:function(mph)   { \n             speed   =   mph; \n             return   speed; \n         } \n     } \n     //prototype   entry   stuff  }   Once I add the appropriate information, my code looks like this. I cut off the majority of the prototype code to save space on the page, but you get the idea.  CBQ2   :   {   //my   JMRI   roster   name   is   CBQ2   (without   the   quotes) \n         type :   locomotive , \n         model:{ \n             speed:function(mph)   { \n                 mph   =   speed;   //totally   not   correct   but   it   is   a   functional   example \n                 return   speed; \n             } \n         }, \n\n         //This   begins   the   actual   prototype   object,   which   you ll   probably   want   to   copy   and   paste   from   one   of   our   supported   locomotives,   though   it   is   possible   to   make   your   own. \n         prototype: { \n             builder   :   EMD ,   //This   is   displayed   to   the   client   and   can   be   anything \n             name   :   F7-A ,   //This   is   also   displayed   to   the   client   and   can   be   anything \n             type   :   locomotive ,   //This   must   be   locomotive \n             weight   :   250000 ,   //Weight   of   the   locomotive   in   lbs \n             maxHP   :   1500 ,   //Horsepower   of   the   locomotive \n             notchRPM   :   [ 300 ,   362 ,   425 ,   487 ,   550 ,   613 ,   675 ,   738 ,   800 ], \n             notchMaxSpeeds   :   [ null ,   7.5 ,   15 ,   22.5 ,   30 ,   37.5 ,   45 ,   52.5 ,   60 ], \n             engineRunning :   0 ,   //0   or   1   -   1   is   on,   0   is   off \n             fuel   :   { \n                 usage   :   [3.5,   6.5,   14.5,   23.4,   33.3,   45.7,   59.6,   75.3,   93.1],   //array   in   gal/hr,   by   notch \n                 capacity   :   1200,   //fuel   tank   in   GAL \n             } , \n\n             //tons   more   code   in   here;   I   cut   it   out   for   readability \n         }, \n     },   Now we have the code to add to the  bundles.locomotives  object.  3. Add the code to the  bundles.locomotives  object, inside  cfg/bundles.json .  This is where it's helpful to know basic JSON syntax. The hierarchy here is something like this:  bundles.locomotives   =   { \n     Some Roster Entry :{ \n         //all   the   information \n     }, \n     Another Roster Entry :{ \n         //information \n     }  }   Just add the code above into your file. Mine looked like this (sample below shows only the top).  bundles.locomotives   =   { \n     CBQ2   :   { \n         type:   locomotive , \n         model:{ \n             speed:function(mph)   { \n                 mph   =   speed;   //totally   not   correct   but   it   is   a   functional   example \n                 return   speed; \n             } \n         } , \n         prototype: { \n             builder   :   EMD ,   //This   is   displayed   to   the   client   and   can   be   anything \n             name   :   F7-A ,   //This   is   also   displayed   to   the   client   and   can   be   anything \n             type   :   locomotive ,   //This   must   be   locomotive \n             weight   :   250000 ,   //Weight   of   the   locomotive   in   lbs \n             maxHP   :   1500 ,   //Horsepower   of   the   locomotive   Now you should be able to load up ZephyrCab and connect to your layout. Once you've connected, a list of whatever roster entries you've added will appear as locomotives you can add to your train. Roster entries you don't set up in  bundles.json  will simply be ignored. You should be able to add the locomotive to your train and start driving it. Have fun!   If you encounter a problem at any point in this guide, please  make an issue on GitHub , and I'll be glad to assist you.", 
            "title": "Example Setup"
        }, 
        {
            "location": "/reference/supported/", 
            "text": "Decoders\n#\n\n\n\n\nESU\n\n\nLokSound Select with EMD 567 Sound File\n: \nStable\n\n\nLokSound Select with other sound file\n: \nPotentially Stable\n\n\n\n\n\n\n\n\nMore DCC decoder support coming soon! If you have a decoder you'd like supported, please \nmake an issue on GitHub.\n\n\nModels\n#\n\n\nNot applicable; the scale speed feature is not finished yet!\n\n\nPrototypes\n#\n\n\nPlease use the list below to see if your prototype locomotive is supported by ZephyrCab. Each locomotive is rated on the following scale:\n\n\n\n\nGood\n means the locomotive bundle is well-tested and stable.\n\n\nFair\n means the locomotive bundle is basically functional, but may have minor code issues or inaccurate information.\n\n\nBad\n means the locomotive bundle is very buggy, and is likely still under development. It is available, but it is unstable and/or unfinished, and probably contains inaccurate information or lacks information. Bundles with a \nBad\n rating are recommended for developers only.\n\n\nUnrated\n means the locomotive bundle has been developed or is being developed, but we don't know how stable it is and what bugs it may contain.\n\n\n\n\n\n\nEMD\n#\n\n\n\n\nF7-A\n: \nGood\n\n\nFT-A\n: \nFair\n\n\nGP15-1\n: \nBad", 
            "title": "Supported Models"
        }, 
        {
            "location": "/reference/supported/#decoders", 
            "text": "ESU  LokSound Select with EMD 567 Sound File :  Stable  LokSound Select with other sound file :  Potentially Stable     More DCC decoder support coming soon! If you have a decoder you'd like supported, please  make an issue on GitHub.", 
            "title": "Decoders"
        }, 
        {
            "location": "/reference/supported/#models", 
            "text": "Not applicable; the scale speed feature is not finished yet!", 
            "title": "Models"
        }, 
        {
            "location": "/reference/supported/#prototypes", 
            "text": "Please use the list below to see if your prototype locomotive is supported by ZephyrCab. Each locomotive is rated on the following scale:   Good  means the locomotive bundle is well-tested and stable.  Fair  means the locomotive bundle is basically functional, but may have minor code issues or inaccurate information.  Bad  means the locomotive bundle is very buggy, and is likely still under development. It is available, but it is unstable and/or unfinished, and probably contains inaccurate information or lacks information. Bundles with a  Bad  rating are recommended for developers only.  Unrated  means the locomotive bundle has been developed or is being developed, but we don't know how stable it is and what bugs it may contain.", 
            "title": "Prototypes"
        }, 
        {
            "location": "/reference/supported/#emd", 
            "text": "F7-A :  Good  FT-A :  Fair  GP15-1 :  Bad", 
            "title": "EMD"
        }, 
        {
            "location": "/userguide/how-it-works/", 
            "text": "How ZephyrCab works\n#\n\n\n\n\nZephyrCab ties sophisticated layout control through JMRI with a built-from-scratch physics engine to create realistic controls and behavior for your models. Unfortunately, many of the features listed here are still unstable, or lack proper documentation. Please make an issue on GitHub or join the Gitter chatroom if you have questions.\n\n\n\n\nDCC Decoders\n#\n\n\nZephyrCab has an internal abstraction layer for DCC decoder functions, making it easy to support advanced features like manual notching sounds on a variety of DCC decoders. This means that if the air compressor is F21 on a LokSound, and F17 on a Tsunami (making this up) then we can solve that difference in software and both decoders will function just fine.\n\n\nUnfortunately, this means your decoder \nmust\n be supported by the abstraction layer. Check the Supported Decoders list to see if your decoder is currently supported.\n\n\nHave a decoder you want supported? Building a decoder object simply requires basic JavaScript skills, and helps improve the project dramatically. Make an issue on GitHub for more information!\n\n\nModels\n#\n\n\nThis feature is still unstable. Scale speed is simply set in DCC speed steps right now. I hope to fix this soon!\n\n\nIn order to accurately mimic scale speed, ZephyrCab must have a \"speed table\" for your model.\n\n\nPrototype Information\n#\n\n\nZephyrCab utilizes a laundry list of data from the prototype locomotive to create a realistic simulation of the locomotive's behavior. These values are stored in JavaScript Objects (JSON), and are each linked to a JMRI roster entry. For more information see \nConfiguring Locomotives in \nbundles.json\n.\n\n\nDeveloper Information\n#\n\n\n\n\nLayout Communication:\n ZephyrCab uses \nJMRI's JSON WebSockets server\n to communicate with your layout. Any JMRI-connected layout is compatible. Low-level communication is handled in \nscripts/websockets.js\n and higher-level JMRI tasks are handled in \nscripts/jmri-core.js\n.\n\n\nDCC Decoders:\n ZephyrCab has its own abstraction layer for common DCC decoder functions, allowing support for a wide range of decoders, including advanced features like manual notching. This is handled in \ndecoders.js\n.\n\n\nPhysics Simulation:\n ZephyrCab's physics engine is built from scratch. At this time it is unfinished, though I am making progress. It is found in \nscripts/sim.js\n.\n\n\nUI CSS/JS Backend:\n MaterializeCSS is used for the majority of the UI, with some small modifications and custom scripts. jQuery is used extensively.", 
            "title": "How It Works"
        }, 
        {
            "location": "/userguide/how-it-works/#how-zephyrcab-works", 
            "text": "ZephyrCab ties sophisticated layout control through JMRI with a built-from-scratch physics engine to create realistic controls and behavior for your models. Unfortunately, many of the features listed here are still unstable, or lack proper documentation. Please make an issue on GitHub or join the Gitter chatroom if you have questions.", 
            "title": "How ZephyrCab works"
        }, 
        {
            "location": "/userguide/how-it-works/#dcc-decoders", 
            "text": "ZephyrCab has an internal abstraction layer for DCC decoder functions, making it easy to support advanced features like manual notching sounds on a variety of DCC decoders. This means that if the air compressor is F21 on a LokSound, and F17 on a Tsunami (making this up) then we can solve that difference in software and both decoders will function just fine.  Unfortunately, this means your decoder  must  be supported by the abstraction layer. Check the Supported Decoders list to see if your decoder is currently supported.  Have a decoder you want supported? Building a decoder object simply requires basic JavaScript skills, and helps improve the project dramatically. Make an issue on GitHub for more information!", 
            "title": "DCC Decoders"
        }, 
        {
            "location": "/userguide/how-it-works/#models", 
            "text": "This feature is still unstable. Scale speed is simply set in DCC speed steps right now. I hope to fix this soon!  In order to accurately mimic scale speed, ZephyrCab must have a \"speed table\" for your model.", 
            "title": "Models"
        }, 
        {
            "location": "/userguide/how-it-works/#prototype-information", 
            "text": "ZephyrCab utilizes a laundry list of data from the prototype locomotive to create a realistic simulation of the locomotive's behavior. These values are stored in JavaScript Objects (JSON), and are each linked to a JMRI roster entry. For more information see  Configuring Locomotives in  bundles.json .", 
            "title": "Prototype Information"
        }, 
        {
            "location": "/userguide/how-it-works/#developer-information", 
            "text": "Layout Communication:  ZephyrCab uses  JMRI's JSON WebSockets server  to communicate with your layout. Any JMRI-connected layout is compatible. Low-level communication is handled in  scripts/websockets.js  and higher-level JMRI tasks are handled in  scripts/jmri-core.js .  DCC Decoders:  ZephyrCab has its own abstraction layer for common DCC decoder functions, allowing support for a wide range of decoders, including advanced features like manual notching. This is handled in  decoders.js .  Physics Simulation:  ZephyrCab's physics engine is built from scratch. At this time it is unfinished, though I am making progress. It is found in  scripts/sim.js .  UI CSS/JS Backend:  MaterializeCSS is used for the majority of the UI, with some small modifications and custom scripts. jQuery is used extensively.", 
            "title": "Developer Information"
        }, 
        {
            "location": "/dev-reference/", 
            "text": "Developer Quick Reference\n#\n\n\nThis contains a few useful bits of information for developers, mostly standard functions/objects.\n\n\nDCC Decoder Standard Methods\n#\n\n\nDecoders are created using the \nnew\n keyword, and when created they should also create a \njmri.throttle\n object for themselves. You can use the code below to create a throttle object:\n\ntrain.all[trainPosition].throttle = new jmri.throttle(address,jmri.throttleName.generate());\n//the jmri.throttleName.generate() just creates a name based on the position of the element in the train.\n\n\n\nEach decoder object should also contain the following code to handle speed:\n\nthis.speed = {};\nthis.speed.state = 0;\nthis.speed.set = function (speed) {\n    train.all[trainPosition].throttle.speed.set(speed);\n    train.all[trainPosition].dcc.speed.state = speed;\n};\nthis.speed.setMPH = function (mph) {\n    var speed = train.all[trainPosition].model.speed(mph);\n    train.all[trainPosition].dcc.speed.set(speed);\n};\n\n\n\nFinally, all decoder objects must have an \nf\n object for various functions. It \nmust\n contain the following hierarchy, which is written in pseudo-JSON:\n\n//All the functions, mostly sounds\nf : {\n    headlight : {\n        set : function( Boolean state),\n        state : Boolean state,\n    },\n    bell : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    horn : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    compressor : {\n        set : function ( Boolean state),\n        state : Boolean state,\n    },\n    airDump : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    dynBrakes : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    engine : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    notch : {\n        up : function(),\n        down : function(),\n        state : Integer[0-8],\n    },\n},", 
            "title": "Developer Reference"
        }, 
        {
            "location": "/dev-reference/#developer-quick-reference", 
            "text": "This contains a few useful bits of information for developers, mostly standard functions/objects.", 
            "title": "Developer Quick Reference"
        }, 
        {
            "location": "/dev-reference/#dcc-decoder-standard-methods", 
            "text": "Decoders are created using the  new  keyword, and when created they should also create a  jmri.throttle  object for themselves. You can use the code below to create a throttle object: train.all[trainPosition].throttle = new jmri.throttle(address,jmri.throttleName.generate());\n//the jmri.throttleName.generate() just creates a name based on the position of the element in the train.  Each decoder object should also contain the following code to handle speed: this.speed = {};\nthis.speed.state = 0;\nthis.speed.set = function (speed) {\n    train.all[trainPosition].throttle.speed.set(speed);\n    train.all[trainPosition].dcc.speed.state = speed;\n};\nthis.speed.setMPH = function (mph) {\n    var speed = train.all[trainPosition].model.speed(mph);\n    train.all[trainPosition].dcc.speed.set(speed);\n};  Finally, all decoder objects must have an  f  object for various functions. It  must  contain the following hierarchy, which is written in pseudo-JSON: //All the functions, mostly sounds\nf : {\n    headlight : {\n        set : function( Boolean state),\n        state : Boolean state,\n    },\n    bell : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    horn : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    compressor : {\n        set : function ( Boolean state),\n        state : Boolean state,\n    },\n    airDump : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    dynBrakes : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    engine : {\n        set : function ( Boolean state ),\n        state : Boolean state,\n    },\n    notch : {\n        up : function(),\n        down : function(),\n        state : Integer[0-8],\n    },\n},", 
            "title": "DCC Decoder Standard Methods"
        }
    ]
}