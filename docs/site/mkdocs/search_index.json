{
    "docs": [
        {
            "location": "/", 
            "text": "Quickstart Guide\n#\n\n\nIf you have experience with railway equipment and/or the physics behind it, your knowledge can help improve the software. Please make an account on \nGitHub\n and \nmake an issue\n or \njoin the Gitter chat\n to introduce yourself and ask for help. I will be glad to help you get a copy of ZephyrCab working for evaluation and testing if you can critique the program based on real railway experience.\n\n\n\n\nHowever, if you are a normal user and you are not sure how to set up a web server, I do not recommend trying ZephyrCab at this time. It will only cause you immense frustration, as it is not ready for production use yet.\n\n\nPrerequisites\n#\n\n\n\n\n\n\nA DCC layout connected to JMRI.\n\n\n\n\n\n\nA web server.\n I recommend using a Linux machine (such as the Raspberry Pi) for this, but you can run it on any OS you like.\n\n\n\n\nHow to set up Apache web server on Windows\n\n\nHow to set up lighttpd web server on Linux\n - Ignore the part about installing PHP\n\n\nMac OSX is not covered in this guide, but if you install any simple web server it should work fine.\n\n\n\n\n\n\nBasic JavaScript/JSON knowledge.\n Due to the work-in-progress nature of the project, you will have to edit a few JSON files to configure it.\n\n\n\n\nInstallation\n#\n\n\n\n\nDownload ZephyrCab from GitHub as a zipped archive.\n\n\nExtract with your favorite archiving program, and save the contents in your web server root. On Linux this is typically \n/var/www\n.\n\n\nTest by visiting \nlocalhost\n in a web browser. You should be greeted with a \"Connection Settings\" page. If so, you've installed ZephyrCab correctly!\n\n\n\n\nSetup\n#\n\n\nSome JavaScript/JSON knowledge is highly recommended. Eventually I will bundle tools for easy setup, but right now the project is still very much under development, and requires editing some JSON files to configure it. Be prepared for a little tinkering, but don't worry, you can always make an issue on GitHub or join the Gitter chat if you encounter a problem.\n\n\n1. Make sure JMRI's web server is running.\n See \nJMRI Documentation\n for more information.\n\n\n2. Configure automatic connection to your layout in \n/cfg/settings.json\n.\n Simply edit the \ncfg.ip\n and \ncfg.port\n lines like this:\n\n\ncfg.ip = \n10.10.39.85\n;\ncfg.port = 12080;\n\n\n\n\nOnce that's done, ZephyrCab should automatically connect to your JMRI install every time you open it.\n\n\n3. Configure \nbundles.json\n with your locomotive roster and DCC decoder information.\n This requires some knowledge of JSON syntax, and I am in the process of rewriting docs for this. Currently, the only supported locomotive is the EMD F7-A. I will update the documentation once the process of configuring \nbundles.json\n has been refined.\n\n\n\n\nOnce you have your \nbundles.json\n set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on \nthe project's GitHub page\n.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#quickstart-guide", 
            "text": "If you have experience with railway equipment and/or the physics behind it, your knowledge can help improve the software. Please make an account on  GitHub  and  make an issue  or  join the Gitter chat  to introduce yourself and ask for help. I will be glad to help you get a copy of ZephyrCab working for evaluation and testing if you can critique the program based on real railway experience.   However, if you are a normal user and you are not sure how to set up a web server, I do not recommend trying ZephyrCab at this time. It will only cause you immense frustration, as it is not ready for production use yet.", 
            "title": "Quickstart Guide"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "A DCC layout connected to JMRI.    A web server.  I recommend using a Linux machine (such as the Raspberry Pi) for this, but you can run it on any OS you like.   How to set up Apache web server on Windows  How to set up lighttpd web server on Linux  - Ignore the part about installing PHP  Mac OSX is not covered in this guide, but if you install any simple web server it should work fine.    Basic JavaScript/JSON knowledge.  Due to the work-in-progress nature of the project, you will have to edit a few JSON files to configure it.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#installation", 
            "text": "Download ZephyrCab from GitHub as a zipped archive.  Extract with your favorite archiving program, and save the contents in your web server root. On Linux this is typically  /var/www .  Test by visiting  localhost  in a web browser. You should be greeted with a \"Connection Settings\" page. If so, you've installed ZephyrCab correctly!", 
            "title": "Installation"
        }, 
        {
            "location": "/#setup", 
            "text": "Some JavaScript/JSON knowledge is highly recommended. Eventually I will bundle tools for easy setup, but right now the project is still very much under development, and requires editing some JSON files to configure it. Be prepared for a little tinkering, but don't worry, you can always make an issue on GitHub or join the Gitter chat if you encounter a problem.  1. Make sure JMRI's web server is running.  See  JMRI Documentation  for more information.  2. Configure automatic connection to your layout in  /cfg/settings.json .  Simply edit the  cfg.ip  and  cfg.port  lines like this:  cfg.ip =  10.10.39.85 ;\ncfg.port = 12080;  Once that's done, ZephyrCab should automatically connect to your JMRI install every time you open it.  3. Configure  bundles.json  with your locomotive roster and DCC decoder information.  This requires some knowledge of JSON syntax, and I am in the process of rewriting docs for this. Currently, the only supported locomotive is the EMD F7-A. I will update the documentation once the process of configuring  bundles.json  has been refined.   Once you have your  bundles.json  set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on  the project's GitHub page .", 
            "title": "Setup"
        }, 
        {
            "location": "/userguide/configuring-settings-json/", 
            "text": "Configuring Basic Settings with \nsettings.json\n#\n\n\nZephyrCab has a few basic configuration options in \n/cfg/settings.json\n.\n\n\nThe config file \ndoes not\n require any programming knowledge to edit; simply follow this guide. Be sure to match the syntax exactly (i.e. put quotes where there are quotes, semicolons where there are semicolons, etc)\n\n\nAutomatic Layout Connection\n#\n\n\nZephyrCab can automatically connect to your layout each time you open it. This is convenient (nobody likes to remember IP addresses).\n\n\nTo enable this feature, simply add the IP address of your JMRI computer and the port of your JMRI web server. By default, the JMRI web server runs on port 12080. Make sure to end each line with a semicolon. If you don't know your computer's IP address, you can find it with the \nipconfig\n command in Windows or the \nifconfig\n command on Linux.\n\n\ncfg.ip = \n192.168.1.12\n;\ncfg.port = 12080;\n\n\n\n\nTo disable this feature, simply remove the right side of those two lines, as shown below. This will allow you to specify an IP address and connect manually.\n\n\ncfg.ip;\ncfg.port;\n\n\n\n\nDefault Brake System Pressure (feed valve)\n#\n\n\nNorth American freight train brakes operate based on an inverse relationship between brake line pressure and brake cylinder pressure. When the brake line pressure decreases, the brake cylinder pressure increases, applying the brakes.\n\n\nAll brake systems have a maximum brake line pressure, which will release the brakes completely. This is set via the feed valve in the locomotive cab. ZephyrCab's default feed valve setting is 90psi, the most common pressure. However, some railroads use different pressures, and if you are modeling such a railroad it may be inconvenient for you to change the feed valve pressure every time you use ZephyrCab.\n\n\nBy adjusting the \ncfg.brakes.defaultFeedValveSetting\n option, you can change the default feed valve pressure of 90psi.\n Simply edit the integer value. In the example below, we change the default feed valve pressure to 110psi.\n\n\ncfg.brakes.defaultFeedValveSetting = 110;\n\n\n\n\nDo not include \"psi\" on the end of your number!\n\n\nDisable Push Notifications\n#\n\n\nThis is an experimental feature and has not been documented yet, as it may be removed in future releases.\n\n\nDeveloper Options\n#\n\n\nThe options below are specifically geared towards developers tinkering with the program. Normal users shouldn't need these features.\n\n\nLog All WebSockets Messages\n#\n\n\nThis is useful in debugging communication between JMRI and ZephyrCab. When \ncfg.logallmessages === true\n, ZephyrCab will dump all WebSockets messages to the console via \nconsole.log()\n. A timestamp is also included for each log entry.\n\n\nTo enable WebSockets logging, set \ncfg.logallmessages\n to \ntrue\n, as shown below.\n\n\ncfg.logallmessages = true;\n\n\n\n\nIt is not recommended to enable this unless you need it, as it sometimes creates an absurd amount of \nconsole.log()\n calls, and may bog down your browser.\n\n\nDebugging Toasts\n#\n\n\nZephyrCab utilizes the excellent \nMaterializeCSS Framework\n, which provides a notification function called a toast. You can create a toast with \nMaterialize.toast()\n. See this page on the Materialize documentation to learn more.\n\n\nWhat are debug toasts?\n#\n\n\nZephyrCab has a small global function called \ndebugToast\n that is a wrapper for the toast function. It is used to give the user information in instances where \nconsole.log\n is not ideal. When the \ncfg.debugToasts\n boolean is \nfalse\n, the function simply does nothing. However, when \ncfg.debugToasts\n is set to \ntrue\n, the debug toasts are passed through to \nMaterialize.toast()\n as normal.\n\n\nIn short, setting \ncfg.debugToasts\n to \ntrue\n will turn on small pop-up debugging messages built in to some parts of the ZephyrCab code.\n If you are using ZephyrCab locally in a development environment, I recommend leaving debugToasts on, as they are relatively unobtrusive and provide useful information.\n\n\ncfg.logallmessages = true; //enables debug toasts\n\ncfg.logallmessages = false; //disables debug toasts\n\n\n\n\n\n\nTroubleshooting\n#\n\n\nIf ZephyrCab misbehaves after an edit to the config file, please double check your syntax.\n\n\nIf you encounter a problem with your config file, please \nmake an issue on GitHub\n and I will do my best to assist you.\n\n\nFeature Requests\n#\n\n\nIf you have something you'd like to add to \nsettings.json\n, please \nmake an issue on GitHub\n with your feature request, or better yet build it yourself and fork/pull request. All contributions are welcome!", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#configuring-basic-settings-with-settingsjson", 
            "text": "ZephyrCab has a few basic configuration options in  /cfg/settings.json .  The config file  does not  require any programming knowledge to edit; simply follow this guide. Be sure to match the syntax exactly (i.e. put quotes where there are quotes, semicolons where there are semicolons, etc)", 
            "title": "Configuring Basic Settings with settings.json"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#automatic-layout-connection", 
            "text": "ZephyrCab can automatically connect to your layout each time you open it. This is convenient (nobody likes to remember IP addresses).  To enable this feature, simply add the IP address of your JMRI computer and the port of your JMRI web server. By default, the JMRI web server runs on port 12080. Make sure to end each line with a semicolon. If you don't know your computer's IP address, you can find it with the  ipconfig  command in Windows or the  ifconfig  command on Linux.  cfg.ip =  192.168.1.12 ;\ncfg.port = 12080;  To disable this feature, simply remove the right side of those two lines, as shown below. This will allow you to specify an IP address and connect manually.  cfg.ip;\ncfg.port;", 
            "title": "Automatic Layout Connection"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#default-brake-system-pressure-feed-valve", 
            "text": "North American freight train brakes operate based on an inverse relationship between brake line pressure and brake cylinder pressure. When the brake line pressure decreases, the brake cylinder pressure increases, applying the brakes.  All brake systems have a maximum brake line pressure, which will release the brakes completely. This is set via the feed valve in the locomotive cab. ZephyrCab's default feed valve setting is 90psi, the most common pressure. However, some railroads use different pressures, and if you are modeling such a railroad it may be inconvenient for you to change the feed valve pressure every time you use ZephyrCab.  By adjusting the  cfg.brakes.defaultFeedValveSetting  option, you can change the default feed valve pressure of 90psi.  Simply edit the integer value. In the example below, we change the default feed valve pressure to 110psi.  cfg.brakes.defaultFeedValveSetting = 110;  Do not include \"psi\" on the end of your number!", 
            "title": "Default Brake System Pressure (feed valve)"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#disable-push-notifications", 
            "text": "This is an experimental feature and has not been documented yet, as it may be removed in future releases.", 
            "title": "Disable Push Notifications"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#developer-options", 
            "text": "The options below are specifically geared towards developers tinkering with the program. Normal users shouldn't need these features.", 
            "title": "Developer Options"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#log-all-websockets-messages", 
            "text": "This is useful in debugging communication between JMRI and ZephyrCab. When  cfg.logallmessages === true , ZephyrCab will dump all WebSockets messages to the console via  console.log() . A timestamp is also included for each log entry.  To enable WebSockets logging, set  cfg.logallmessages  to  true , as shown below.  cfg.logallmessages = true;  It is not recommended to enable this unless you need it, as it sometimes creates an absurd amount of  console.log()  calls, and may bog down your browser.", 
            "title": "Log All WebSockets Messages"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#debugging-toasts", 
            "text": "ZephyrCab utilizes the excellent  MaterializeCSS Framework , which provides a notification function called a toast. You can create a toast with  Materialize.toast() . See this page on the Materialize documentation to learn more.", 
            "title": "Debugging Toasts"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#what-are-debug-toasts", 
            "text": "ZephyrCab has a small global function called  debugToast  that is a wrapper for the toast function. It is used to give the user information in instances where  console.log  is not ideal. When the  cfg.debugToasts  boolean is  false , the function simply does nothing. However, when  cfg.debugToasts  is set to  true , the debug toasts are passed through to  Materialize.toast()  as normal.  In short, setting  cfg.debugToasts  to  true  will turn on small pop-up debugging messages built in to some parts of the ZephyrCab code.  If you are using ZephyrCab locally in a development environment, I recommend leaving debugToasts on, as they are relatively unobtrusive and provide useful information.  cfg.logallmessages = true; //enables debug toasts\n\ncfg.logallmessages = false; //disables debug toasts", 
            "title": "What are debug toasts?"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#troubleshooting", 
            "text": "If ZephyrCab misbehaves after an edit to the config file, please double check your syntax.  If you encounter a problem with your config file, please  make an issue on GitHub  and I will do my best to assist you.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/userguide/configuring-settings-json/#feature-requests", 
            "text": "If you have something you'd like to add to  settings.json , please  make an issue on GitHub  with your feature request, or better yet build it yourself and fork/pull request. All contributions are welcome!", 
            "title": "Feature Requests"
        }, 
        {
            "location": "/userguide/how-it-works/", 
            "text": "How ZephyrCab works\n#\n\n\n\n\nZephyrCab ties sophisticated layout control through JMRI with a built-from-scratch physics engine to create realistic controls and behavior for your models. Unfortunately, many of the features listed here are still unstable, or lack proper documentation. Please make an issue on GitHub or join the Gitter chatroom if you have questions.\n\n\n\n\nDCC Decoders\n#\n\n\nZephyrCab has an internal abstraction layer for DCC decoder functions, making it easy to support advanced features like manual notching sounds on a variety of DCC decoders. This means that if the air compressor is F21 on a LokSound, and F17 on a Tsunami (making this up) then we can solve that difference in software and both decoders will function just fine.\n\n\nUnfortunately, this means your decoder \nmust\n be supported by the abstraction layer. Check the Supported Decoders list to see if your decoder is currently supported.\n\n\nHave a decoder you want supported? Building a decoder object simply requires basic JavaScript skills, and helps improve the project dramatically. Make an issue on GitHub for more information!\n\n\nModels\n#\n\n\nThis feature is still unstable. Scale speed is simply set in DCC speed steps right now. I hope to fix this soon!\n\n\nIn order to accurately mimic scale speed, ZephyrCab must have a \"speed table\" for your model.\n\n\nPrototype Information\n#\n\n\nZephyrCab utilizes a laundry list of data from the prototype locomotive to create a realistic simulation of the locomotive's behavior. These values are stored in JavaScript Objects (JSON), and are each linked to a JMRI roster entry. For more information see \nConfiguring Locomotives in \nbundles.json\n.\n\n\nDeveloper Information\n#\n\n\n\n\nLayout Communication:\n ZephyrCab uses \nJMRI's JSON WebSockets server\n to communicate with your layout. Any JMRI-connected layout is compatible. Low-level communication is handled in \nscripts/websockets.js\n and higher-level JMRI tasks are handled in \nscripts/jmri-core.js\n.\n\n\nDCC Decoders:\n ZephyrCab has its own abstraction layer for common DCC decoder functions, allowing support for a wide range of decoders, including advanced features like manual notching. This is handled in \ndecoders.js\n.\n\n\nPhysics Simulation:\n ZephyrCab's physics engine is built from scratch. At this time it is unfinished, though I am making progress. It is found in \nscripts/sim.js\n.\n\n\nUI CSS/JS Backend:\n MaterializeCSS is used for the majority of the UI, with some small modifications and custom scripts. jQuery is used extensively.", 
            "title": "How ZephyrCab works"
        }, 
        {
            "location": "/userguide/how-it-works/#how-zephyrcab-works", 
            "text": "ZephyrCab ties sophisticated layout control through JMRI with a built-from-scratch physics engine to create realistic controls and behavior for your models. Unfortunately, many of the features listed here are still unstable, or lack proper documentation. Please make an issue on GitHub or join the Gitter chatroom if you have questions.", 
            "title": "How ZephyrCab works"
        }, 
        {
            "location": "/userguide/how-it-works/#dcc-decoders", 
            "text": "ZephyrCab has an internal abstraction layer for DCC decoder functions, making it easy to support advanced features like manual notching sounds on a variety of DCC decoders. This means that if the air compressor is F21 on a LokSound, and F17 on a Tsunami (making this up) then we can solve that difference in software and both decoders will function just fine.  Unfortunately, this means your decoder  must  be supported by the abstraction layer. Check the Supported Decoders list to see if your decoder is currently supported.  Have a decoder you want supported? Building a decoder object simply requires basic JavaScript skills, and helps improve the project dramatically. Make an issue on GitHub for more information!", 
            "title": "DCC Decoders"
        }, 
        {
            "location": "/userguide/how-it-works/#models", 
            "text": "This feature is still unstable. Scale speed is simply set in DCC speed steps right now. I hope to fix this soon!  In order to accurately mimic scale speed, ZephyrCab must have a \"speed table\" for your model.", 
            "title": "Models"
        }, 
        {
            "location": "/userguide/how-it-works/#prototype-information", 
            "text": "ZephyrCab utilizes a laundry list of data from the prototype locomotive to create a realistic simulation of the locomotive's behavior. These values are stored in JavaScript Objects (JSON), and are each linked to a JMRI roster entry. For more information see  Configuring Locomotives in  bundles.json .", 
            "title": "Prototype Information"
        }, 
        {
            "location": "/userguide/how-it-works/#developer-information", 
            "text": "Layout Communication:  ZephyrCab uses  JMRI's JSON WebSockets server  to communicate with your layout. Any JMRI-connected layout is compatible. Low-level communication is handled in  scripts/websockets.js  and higher-level JMRI tasks are handled in  scripts/jmri-core.js .  DCC Decoders:  ZephyrCab has its own abstraction layer for common DCC decoder functions, allowing support for a wide range of decoders, including advanced features like manual notching. This is handled in  decoders.js .  Physics Simulation:  ZephyrCab's physics engine is built from scratch. At this time it is unfinished, though I am making progress. It is found in  scripts/sim.js .  UI CSS/JS Backend:  MaterializeCSS is used for the majority of the UI, with some small modifications and custom scripts. jQuery is used extensively.", 
            "title": "Developer Information"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/", 
            "text": "Adding your locomotives with \nbundles.json\n#\n\n\nZephyrCab requires a substantial amount of information for each locomotive in order to produce an accurate simulation. Everything from weight, horsepower, length, drivetrain efficiency, and more is taken into account. It also requires information on DCC decoder functions to produce the correct sound/lighting on your model, and a speed table for your model to produce scale speeds*.\n\n\nWhat's a bundle?\n#\n\n\nZephyrCab stores this information in \"bundles,\" which are each linked to a specific roster entry in your JMRI roster. This allows ZephyrCab to easily bind all the required information to a single locomotive on your layout, making it quick and easy to select a locomotive.\n\n\nSetting up a locomotive bundle\n#\n\n\nBundles are stored in JSON (JavaScript Object Notation). Basic syntax is shown below, and you can \nlearn more about JSON here.\n\n\n{\n    \nitem\n:\nvalue\n,\n    \nparent-item\n: {\n        \nchild\n:\nsome string of text\n,\n        \nanotherchild\n:42,\n    },\n    \nsome boolean\n:true,\n}\n\n\n\n\nAs you may have guessed, \n/cfg/bundles.json\n contains all your bundles. However, the information stored here doesn't tell everything. ZephyrCab relies on \n/cfg/decoders.js\n for the DCC decoder abstraction layer, so you'll need to make sure your decoder is supported.\n\n\nExample Setup\n#\n\n\nHere, I'll go through the entire process for adding a locomotive to your \nbundles.json\n file.\n\n\nMake a copy of your \nbundles.json\n and save it somewhere else in case you need to undo your changes.\n\n\n1. Determine if your combination of prototype, model, and DCC decoder are supported.\n For this example, I have a Bachmann F7-A with a LokSound Select DCC decoder in it. So my specs are:\n\n\n\n\nModel:\n Bachmann F7-A\n\n\nPrototype:\n EMD F7-A\n\n\nDCC Decoder:\n LokSound Select with EMD 567 Sound File\n\n\n\n\nBy checking the Supported Locomotives/Decoders table, I confirm my specs are supported.\n\n\n2. Create a JSON object with your prototype bundle and your model's JMRI roster name.\n You'll need to use a text editor to do this. If you're on Windows, use \nNotepad++\n. If you're not familiar with basic JSON syntax, it would help you to \nread this.\n\n\nThe object should be structured like this (remember that lines with \n//\n are comments):\n\n\nYour JMRI Roster Entry Name\n:{\n    type:\nlocomotive\n,\n    model:{\n        //Scale speed function. This is a WIP\n        speed:function(mph) {\n            speed = mph;\n            return speed;\n        }\n    }\n    //prototype entry stuff\n}\n\n\n\n\nOnce I add the appropriate information, my code looks like this. I cut off the majority of the prototype code to save space on the page, but you get the idea.\n\n\nCBQ2\n : { //my JMRI roster name is \nCBQ2\n (without the quotes)\n        type: \nlocomotive\n,\n        model:{\n            speed:function(mph) {\n                mph = speed; //totally not correct but it is a functional example\n                return speed;\n            }\n        },\n\n        //This begins the actual prototype object, which you'll probably want to copy and paste from one of our supported locomotives, though it is possible to make your own.\n        prototype:{\n            \nbuilder\n : \nEMD\n, //This is displayed to the client and can be anything\n            \nname\n : \nF7-A\n, //This is also displayed to the client and can be anything\n            \ntype\n : \nlocomotive\n, //This must be \nlocomotive\n\n            \nweight\n : 250000, //Weight of the locomotive in lbs\n            \nmaxHP\n : 1500, //Horsepower of the locomotive\n            \nnotchRPM\n : [300, 362, 425, 487, 550, 613, 675, 738, 800],\n            \nnotchMaxSpeeds\n : [null, 7.5, 15, 22.5, 30, 37.5, 45, 52.5, 60],\n            \nengineRunning\n: 0, //0 or 1 - 1 is on, 0 is off\n            fuel : {\n                usage : [3.5, 6.5, 14.5, 23.4, 33.3, 45.7, 59.6, 75.3, 93.1], //array in gal/hr, by notch\n                capacity : 1200, //fuel tank in GAL\n            },\n\n            //tons more code in here; I cut it out for readability\n        },\n    },\n\n\n\n\nNow we have the code to add to the \nbundles.locomotives\n object.\n\n\n3. Add the code to the \nbundles.locomotives\n object, inside \ncfg/bundles.json\n.\n\n\nThis is where it's helpful to know basic JSON syntax. The hierarchy here is something like this:\n\n\nbundles.locomotives = {\n    \nSome Roster Entry\n:{\n        //all the information\n    },\n    \nAnother Roster Entry\n:{\n        //information\n    }\n}\n\n\n\n\nJust add the code above into your file. Mine looked like this (sample below shows only the top).\n\n\nbundles.locomotives = {\n    \nCBQ2\n : {\n        type: \nlocomotive\n,\n        model:{\n            speed:function(mph) {\n                mph = speed; //totally not correct but it is a functional example\n                return speed;\n            }\n        },\n        prototype:{\n            \nbuilder\n : \nEMD\n, //This is displayed to the client and can be anything\n            \nname\n : \nF7-A\n, //This is also displayed to the client and can be anything\n            \ntype\n : \nlocomotive\n, //This must be \nlocomotive\n\n            \nweight\n : 250000, //Weight of the locomotive in lbs\n            \nmaxHP\n : 1500, //Horsepower of the locomotive\n\n\n\n\nNow you should be able to load up ZephyrCab and connect to your layout. Once you've connected, a list of whatever roster entries you've added will appear as locomotives you can add to your train. Roster entries you don't set up in \nbundles.json\n will simply be ignored. You should be able to add the locomotive to your train and start driving it. Have fun!\n\n\n\n\nIf you encounter a problem at any point in this guide, please \nmake an issue on GitHub\n, and I'll be glad to assist you.", 
            "title": "Adding your Locomotives"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#adding-your-locomotives-with-bundlesjson", 
            "text": "ZephyrCab requires a substantial amount of information for each locomotive in order to produce an accurate simulation. Everything from weight, horsepower, length, drivetrain efficiency, and more is taken into account. It also requires information on DCC decoder functions to produce the correct sound/lighting on your model, and a speed table for your model to produce scale speeds*.", 
            "title": "Adding your locomotives with bundles.json"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#whats-a-bundle", 
            "text": "ZephyrCab stores this information in \"bundles,\" which are each linked to a specific roster entry in your JMRI roster. This allows ZephyrCab to easily bind all the required information to a single locomotive on your layout, making it quick and easy to select a locomotive.", 
            "title": "What's a bundle?"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#setting-up-a-locomotive-bundle", 
            "text": "Bundles are stored in JSON (JavaScript Object Notation). Basic syntax is shown below, and you can  learn more about JSON here.  {\n     item : value ,\n     parent-item : {\n         child : some string of text ,\n         anotherchild :42,\n    },\n     some boolean :true,\n}  As you may have guessed,  /cfg/bundles.json  contains all your bundles. However, the information stored here doesn't tell everything. ZephyrCab relies on  /cfg/decoders.js  for the DCC decoder abstraction layer, so you'll need to make sure your decoder is supported.", 
            "title": "Setting up a locomotive bundle"
        }, 
        {
            "location": "/userguide/configuring-bundles-json/#example-setup", 
            "text": "Here, I'll go through the entire process for adding a locomotive to your  bundles.json  file.  Make a copy of your  bundles.json  and save it somewhere else in case you need to undo your changes.  1. Determine if your combination of prototype, model, and DCC decoder are supported.  For this example, I have a Bachmann F7-A with a LokSound Select DCC decoder in it. So my specs are:   Model:  Bachmann F7-A  Prototype:  EMD F7-A  DCC Decoder:  LokSound Select with EMD 567 Sound File   By checking the Supported Locomotives/Decoders table, I confirm my specs are supported.  2. Create a JSON object with your prototype bundle and your model's JMRI roster name.  You'll need to use a text editor to do this. If you're on Windows, use  Notepad++ . If you're not familiar with basic JSON syntax, it would help you to  read this.  The object should be structured like this (remember that lines with  //  are comments):  Your JMRI Roster Entry Name :{\n    type: locomotive ,\n    model:{\n        //Scale speed function. This is a WIP\n        speed:function(mph) {\n            speed = mph;\n            return speed;\n        }\n    }\n    //prototype entry stuff\n}  Once I add the appropriate information, my code looks like this. I cut off the majority of the prototype code to save space on the page, but you get the idea.  CBQ2  : { //my JMRI roster name is  CBQ2  (without the quotes)\n        type:  locomotive ,\n        model:{\n            speed:function(mph) {\n                mph = speed; //totally not correct but it is a functional example\n                return speed;\n            }\n        },\n\n        //This begins the actual prototype object, which you'll probably want to copy and paste from one of our supported locomotives, though it is possible to make your own.\n        prototype:{\n             builder  :  EMD , //This is displayed to the client and can be anything\n             name  :  F7-A , //This is also displayed to the client and can be anything\n             type  :  locomotive , //This must be  locomotive \n             weight  : 250000, //Weight of the locomotive in lbs\n             maxHP  : 1500, //Horsepower of the locomotive\n             notchRPM  : [300, 362, 425, 487, 550, 613, 675, 738, 800],\n             notchMaxSpeeds  : [null, 7.5, 15, 22.5, 30, 37.5, 45, 52.5, 60],\n             engineRunning : 0, //0 or 1 - 1 is on, 0 is off\n            fuel : {\n                usage : [3.5, 6.5, 14.5, 23.4, 33.3, 45.7, 59.6, 75.3, 93.1], //array in gal/hr, by notch\n                capacity : 1200, //fuel tank in GAL\n            },\n\n            //tons more code in here; I cut it out for readability\n        },\n    },  Now we have the code to add to the  bundles.locomotives  object.  3. Add the code to the  bundles.locomotives  object, inside  cfg/bundles.json .  This is where it's helpful to know basic JSON syntax. The hierarchy here is something like this:  bundles.locomotives = {\n     Some Roster Entry :{\n        //all the information\n    },\n     Another Roster Entry :{\n        //information\n    }\n}  Just add the code above into your file. Mine looked like this (sample below shows only the top).  bundles.locomotives = {\n     CBQ2  : {\n        type:  locomotive ,\n        model:{\n            speed:function(mph) {\n                mph = speed; //totally not correct but it is a functional example\n                return speed;\n            }\n        },\n        prototype:{\n             builder  :  EMD , //This is displayed to the client and can be anything\n             name  :  F7-A , //This is also displayed to the client and can be anything\n             type  :  locomotive , //This must be  locomotive \n             weight  : 250000, //Weight of the locomotive in lbs\n             maxHP  : 1500, //Horsepower of the locomotive  Now you should be able to load up ZephyrCab and connect to your layout. Once you've connected, a list of whatever roster entries you've added will appear as locomotives you can add to your train. Roster entries you don't set up in  bundles.json  will simply be ignored. You should be able to add the locomotive to your train and start driving it. Have fun!   If you encounter a problem at any point in this guide, please  make an issue on GitHub , and I'll be glad to assist you.", 
            "title": "Example Setup"
        }, 
        {
            "location": "/reference/supported/", 
            "text": "Decoders\n#\n\n\n\n\nESU\n\n\nLokSound Select with EMD 567 Sound File\n: \nStable\n\n\nLokSound Select with other sound file\n: \nPotentially Stable\n\n\n\n\n\n\n\n\nMore DCC decoder support coming soon! If you have a decoder you'd like supported, please \nmake an issue on GitHub.\n\n\nModels\n#\n\n\nNot applicable; the scale speed feature is not finished yet!\n\n\nPrototypes\n#\n\n\nPlease use the list below to see if your prototype locomotive is supported by ZephyrCab. Each locomotive is rated on the following scale:\n\n\n\n\nGood\n means the locomotive bundle is well-tested and stable.\n\n\nFair\n means the locomotive bundle is basically functional, but may have minor code issues or inaccurate information.\n\n\nBad\n means the locomotive bundle is very buggy, and is likely still under development. It is available, but it is unstable and/or unfinished, and probably contains inaccurate information or lacks information. Bundles with a \nBad\n rating are recommended for developers only.\n\n\nUnrated\n means the locomotive bundle has been developed or is being developed, but we don't know how stable it is and what bugs it may contain.\n\n\n\n\n\n\nEMD\n#\n\n\n\n\nF7-A\n: \nGood\n\n\nFT-A\n: \nFair\n\n\nGP15-1\n: \nBad", 
            "title": "Supported Locomotives/Decoders"
        }, 
        {
            "location": "/reference/supported/#decoders", 
            "text": "ESU  LokSound Select with EMD 567 Sound File :  Stable  LokSound Select with other sound file :  Potentially Stable     More DCC decoder support coming soon! If you have a decoder you'd like supported, please  make an issue on GitHub.", 
            "title": "Decoders"
        }, 
        {
            "location": "/reference/supported/#models", 
            "text": "Not applicable; the scale speed feature is not finished yet!", 
            "title": "Models"
        }, 
        {
            "location": "/reference/supported/#prototypes", 
            "text": "Please use the list below to see if your prototype locomotive is supported by ZephyrCab. Each locomotive is rated on the following scale:   Good  means the locomotive bundle is well-tested and stable.  Fair  means the locomotive bundle is basically functional, but may have minor code issues or inaccurate information.  Bad  means the locomotive bundle is very buggy, and is likely still under development. It is available, but it is unstable and/or unfinished, and probably contains inaccurate information or lacks information. Bundles with a  Bad  rating are recommended for developers only.  Unrated  means the locomotive bundle has been developed or is being developed, but we don't know how stable it is and what bugs it may contain.", 
            "title": "Prototypes"
        }, 
        {
            "location": "/reference/supported/#emd", 
            "text": "F7-A :  Good  FT-A :  Fair  GP15-1 :  Bad", 
            "title": "EMD"
        }
    ]
}